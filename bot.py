import asyncio
from aiogram import Bot, Dispatcher, executor, types
from aiogram.utils.text_decorations import markdown_decoration
import markup as mk
from config import TOKEN
from db_manager import UsersDbManager
import aiogram.types as tp
from aiogram.types import labeled_price, ChatActions
import requests
import datetime
from io import BytesIO
import re
import author_markup as mk2
import author_bot
import ConfirmationOfOrders_bot

bot = Bot(TOKEN)
dp = Dispatcher(bot)

loop = asyncio.get_event_loop()

'''
–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
'''


@dp.message_handler(commands=['start'])
async def start(message):
    tel_id = message.chat.id

    text = '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üñê\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚¨áÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚¨áÔ∏è –∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –±–æ—Ç–µ'
    kb = mk.start_kb
    await bot.send_message(tel_id, text=text, reply_markup=kb, disable_notification=True)


@dp.message_handler(content_types=tp.ContentType.CONTACT)
async def get_contact(message):
    tel_id = message.chat.id

    phone_number = message.contact.phone_number
    first_name = message.contact.first_name
    username = message["from"].username

    await UsersDbManager.add_user(tel_id, first_name, phone_number, username, loop)

    text = 'üí• <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–≤—è–∑–∞–Ω –∫ –í–∞—à–µ–º—É –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞!</b> üí•'
    kb = tp.ReplyKeyboardRemove()
    await bot.send_message(tel_id, text=text, reply_markup=kb, disable_notification=True, parse_mode='html')

    text = '–ù–∞–ø–µ—á–∞—Ç–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –í–∞—à–µ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞‚Äçüéì\n' \
           '<i>–≠—Ç–æ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –±–ª–∞–≥–æ–¥–∞—Ä—è —ç—Ç–æ–º—É –ø–æ–Ω–∏–º–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ä–∞–±–æ—Ç–∞–º.</i>'
    await bot.send_message(tel_id, text=text, disable_notification=True, parse_mode='html')
    await UsersDbManager.update_context(tel_id, 'wait_name', loop)


@dp.message_handler(lambda message:
                    UsersDbManager.sync_get_context(message.chat.id) == 'wait_name')
async def wait_name(message):
    tel_id = message.chat.id
    await UsersDbManager.update_vuz(tel_id, str(message.text), loop)

    text = '–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! üéâ\n' \
           '–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ üìñ  –∏–ª–∏ —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º üôã –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é –≤–Ω–∏–∑—É üëá'
    await bot.send_message(tel_id, text=text, reply_markup=mk.main_menu_ru, disable_notification=True)
    await UsersDbManager.update_context(tel_id, '', loop)


@dp.message_handler(lambda message: message.text == '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ üìñ')
async def loc_m(message):
    tel_id = message.chat.id
    text = '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ üìñ '
    text_2 = '‚ùóÔ∏è –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –∫–∞–∫ –º–æ–∂–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–µ–µ ‚ùóÔ∏è'
    await bot.send_message(tel_id, text=text, reply_markup=mk.otmena, disable_notification=True)
    await bot.send_message(tel_id, text=text_2, reply_markup=mk.cont_1(), disable_notification=True)


@dp.callback_query_handler(lambda call:
                           call.data.startswith('cont_1'))
async def count_yes(call):
    tel_id = call.message.chat.id
    text = '<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã</b> üôÇ'
    await bot.send_message(tel_id, text=text, reply_markup=mk.types, disable_notification=True, parse_mode='html')


@dp.message_handler(lambda message: message.text == 'Online —Ä–µ—à–µ–Ω–∏–µ üöÄ')
async def loc_m(message):
    tel_id = message.chat.id
    await UsersDbManager.update_type(tel_id, 'Online —Ä–µ—à–µ–Ω–∏–µ', loop)
    text = '<b>–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å</b>'
    await bot.send_message(tel_id, text=text, reply_markup=mk.prof, disable_notification=True, parse_mode='html')


@dp.message_handler(lambda message: message.text == '–¢–µ—Å—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ')
async def loc_m(message):
    tel_id = message.chat.id
    await UsersDbManager.update_type(tel_id, message.text, loop)
    text = '<b>–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å</b>'
    await bot.send_message(tel_id, text=text, reply_markup=mk.prof, disable_notification=True, parse_mode='html')


@dp.message_handler(lambda message: message.text == '–î–ó')
async def loc_m(message):
    tel_id = message.chat.id
    await UsersDbManager.update_type(tel_id, message.text, loop)
    text = '<b>–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å</b>'
    await bot.send_message(tel_id, text=text, reply_markup=mk.prof, disable_notification=True, parse_mode='html')


@dp.message_handler(lambda message: message.text == '–≠—Å—Å–µ')
async def loc_m(message):
    tel_id = message.chat.id
    await UsersDbManager.update_type(tel_id, message.text, loop)
    text = '<b>–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å</b>'
    await bot.send_message(tel_id, text=text, reply_markup=mk.prof, disable_notification=True, parse_mode='html')


@dp.message_handler(lambda message: message.text == '–†–µ—Ñ–µ—Ä–∞—Ç')
async def loc_m(message):
    tel_id = message.chat.id
    await UsersDbManager.update_type(tel_id, message.text, loop)
    text = '<b>–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å</b>'
    await bot.send_message(tel_id, text=text, reply_markup=mk.prof, disable_notification=True, parse_mode='html')


@dp.message_handler(lambda message: message.text == '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è')
async def loc_m(message):
    tel_id = message.chat.id
    await UsersDbManager.update_type(tel_id, message.text, loop)
    text = '<b>–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å</b>'
    await bot.send_message(tel_id, text=text, reply_markup=mk.prof, disable_notification=True, parse_mode='html')


@dp.message_handler(lambda message: message.text == '–ü–µ—Ä–µ–≤–æ–¥')
async def loc_m(message):
    tel_id = message.chat.id
    await UsersDbManager.update_type(tel_id, message.text, loop)
    text = '<b>–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å</b>'
    await bot.send_message(tel_id, text=text, reply_markup=mk.prof, disable_notification=True, parse_mode='html')


@dp.message_handler(lambda message: message.text == '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è')
async def loc_m(message):
    tel_id = message.chat.id
    await UsersDbManager.update_type(tel_id, message.text, loop)
    text = '<b>–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å</b>'
    await bot.send_message(tel_id, text=text, reply_markup=mk.prof, disable_notification=True, parse_mode='html')


@dp.message_handler(lambda message: message.text == '–†–∞—Å—á–µ—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞ (–†–ì–†)')
async def loc_m(message):
    tel_id = message.chat.id
    await UsersDbManager.update_type(tel_id, message.text, loop)
    text = '<b>–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å</b>'
    await bot.send_message(tel_id, text=text, reply_markup=mk.prof, disable_notification=True, parse_mode='html')


@dp.message_handler(lambda message: message.text == '–ë–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω')
async def loc_m(message):
    tel_id = message.chat.id
    await UsersDbManager.update_type(tel_id, message.text, loop)
    text = '<b>–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å</b>'
    await bot.send_message(tel_id, text=text, reply_markup=mk.prof, disable_notification=True, parse_mode='html')


@dp.message_handler(lambda message: message.text == '–ö—É—Ä—Å–æ–≤–∞—è')
async def loc_m(message):
    tel_id = message.chat.id
    await UsersDbManager.update_type(tel_id, message.text, loop)
    text = '<b>–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å</b>'
    await bot.send_message(tel_id, text=text, reply_markup=mk.prof, disable_notification=True, parse_mode='html')


@dp.message_handler(lambda message: message.text == '–î–∏–ø–ª–æ–º–Ω–∞—è')
async def loc_m(message):
    tel_id = message.chat.id
    await UsersDbManager.update_type(tel_id, message.text, loop)
    text = '<b>–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å</b>'
    await bot.send_message(tel_id, text=text, reply_markup=mk.prof, disable_notification=True, parse_mode='html')


@dp.message_handler(lambda message: message.text == '–ú–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∞—è')
async def loc_m(message):
    tel_id = message.chat.id
    await UsersDbManager.update_type(tel_id, message.text, loop)
    text = '<b>–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å</b>'
    await bot.send_message(tel_id, text=text, reply_markup=mk.prof, disable_notification=True, parse_mode='html')


@dp.message_handler(lambda message: message.text == '–û—Ç—á–µ—Ç –ø–æ –ø—Ä–∞–∫—Ç–∏–∫–µ')
async def loc_m(message):
    tel_id = message.chat.id
    await UsersDbManager.update_type(tel_id, message.text, loop)
    text = '<b>–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å</b>'
    await bot.send_message(tel_id, text=text, reply_markup=mk.prof, disable_notification=True, parse_mode='html')


@dp.message_handler(lambda message: message.text == '–î—Ä—É–≥–æ–µ')
async def loc_m(message):
    tel_id = message.chat.id
    await UsersDbManager.update_type(tel_id, message.text, loop)
    text = '<b>–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å</b>'
    await bot.send_message(tel_id, text=text, reply_markup=mk.prof, disable_notification=True, parse_mode='html')


@dp.message_handler(lambda message: message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
async def loc_m(message):
    tel_id = message.chat.id
    text = '<b>–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å</b>'
    await bot.send_message(tel_id, text=text, reply_markup=mk.prof, disable_notification=True, parse_mode='html')


@dp.message_handler(lambda message: message.text == '–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–∞—É–∫–∏ ‚Äçüî¨üß¨')
async def loc_m(message):
    tel_id = message.chat.id
    await UsersDbManager.update_prof(tel_id, message.text[:-2], loop)
    text = f'<b>–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–µ–¥–º–µ—Ç</b> üëå'
    await bot.send_message(tel_id, text=text, reply_markup=mk.predm(message.text[:-3]), disable_notification=True,
                           parse_mode='html')


@dp.message_handler(lambda message: message.text == '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å üõ†üíª')
async def loc_m(message):
    tel_id = message.chat.id
    await UsersDbManager.update_prof(tel_id, message.text[:-2], loop)
    text = f'<b>–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–µ–¥–º–µ—Ç</b> üëå'
    await bot.send_message(tel_id, text=text, reply_markup=mk.predm(message.text[:-2]), disable_notification=True,
                           parse_mode='html')


@dp.message_handler(lambda message: message.text == '–ì—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã üë©‚Äçüéì')
async def loc_m(message):
    tel_id = message.chat.id
    await UsersDbManager.update_prof(tel_id, message.text[:-3], loop)
    text = f'<b>–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–µ–¥–º–µ—Ç</b> üëå'
    await bot.send_message(tel_id, text=text, reply_markup=mk.predm(message.text[:-3]), disable_notification=True,
                           parse_mode='html')


@dp.message_handler(lambda message: message.text == '–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã üìä')
async def loc_m(message):
    tel_id = message.chat.id
    await UsersDbManager.update_prof(tel_id, message.text[:-1], loop)
    text = f'<b>–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–µ–¥–º–µ—Ç</b> üëå'
    await bot.send_message(tel_id, text=text, reply_markup=mk.predm(message.text[:-1]), disable_notification=True,
                           parse_mode='html')


@dp.message_handler(lambda message: message.text == '–Ø–∑—ã–∫–∏ üó£')
async def loc_m(message):
    tel_id = message.chat.id
    await UsersDbManager.update_prof(tel_id, message.text[:-1], loop)
    text = f'<b>–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–µ–¥–º–µ—Ç</b> üëå'
    await bot.send_message(tel_id, text=text, reply_markup=mk.predm(message.text[:-1]), disable_notification=True,
                           parse_mode='html')


@dp.message_handler(lambda message: message.text == '–Ø–∑—ã–∫–∏')
async def loc_m(message):
    tel_id = message.chat.id
    # await UsersDbManager.update_prof(tel_id, message.text[:-1], loop)
    text = f'–í—ã–±–µ—Ä–µ—Ç–µ —è–∑—ã–∫ üëå'
    await bot.send_message(tel_id, text=text, reply_markup=mk.predm(message.text + ' '), disable_notification=True)


@dp.message_handler(lambda message: message.text == '–ü—Ä–∞–≤–æ, —é—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏—è ‚öñÔ∏è')
async def loc_m(message):
    tel_id = message.chat.id
    await UsersDbManager.update_prof(tel_id, message.text[:-1], loop)
    await UsersDbManager.update_predm(tel_id, message.text[:-1], loop)
    text = '<b>–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–ª–∏ —Ñ–æ—Ç–æ</b> üìé\n–ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é –Ω–∞–∂–º–∏—Ç–µ –ì–æ—Ç–æ–≤–æ üëå'
    await bot.delete_message(tel_id, message.message_id)
    await bot.send_message(tel_id, text=text, reply_markup=mk.otmena_plus, disable_notification=True, parse_mode='html')
    if str(await UsersDbManager.get_type(tel_id, loop)) == 'Online —Ä–µ—à–µ–Ω–∏–µ':
        text = '<i>–ü—Ä–∏—à–ª–∏—Ç–µ –ø—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã –∏–ª–∏ –ø–æ–¥–æ–±–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≤—ã–ø–æ–ª–Ω—è–ª–∏.</i>'
        await bot.send_message(tel_id, text=text, disable_notification=True, parse_mode='html')
    await UsersDbManager.update_oforml(tel_id, '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –≤–∏–¥', loop)
    await UsersDbManager.update_context(tel_id, 'wait_files', loop)


@dp.message_handler(lambda message: message.text in mk.a)
async def loc_m(message):
    tel_id = message.chat.id
    await UsersDbManager.update_predm(tel_id, message.text, loop)
    text = '<b>–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–ª–∏ —Ñ–æ—Ç–æ</b> üìé\n–ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é –Ω–∞–∂–º–∏—Ç–µ –ì–æ—Ç–æ–≤–æ üëå'
    await bot.delete_message(tel_id, message.message_id)
    await bot.send_message(tel_id, text=text, reply_markup=mk.otmena_plus, disable_notification=True, parse_mode='html')
    if str(await UsersDbManager.get_type(tel_id, loop)) == 'Online —Ä–µ—à–µ–Ω–∏–µ':
        text = '<i>–ü—Ä–∏—à–ª–∏—Ç–µ –ø—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã –∏–ª–∏ –ø–æ–¥–æ–±–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≤—ã–ø–æ–ª–Ω—è–ª–∏.</i>'
        await bot.send_message(tel_id, text=text, disable_notification=True, parse_mode='html')
    await UsersDbManager.update_oforml(tel_id, '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –≤–∏–¥', loop)
    await UsersDbManager.update_context(tel_id, 'wait_files', loop)


@dp.message_handler(lambda message: message.text in mk.t)
async def loc_m(message):
    tel_id = message.chat.id
    await UsersDbManager.update_predm(tel_id, message.text, loop)
    text = '<b>–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–ª–∏ —Ñ–æ—Ç–æ</b> üìé\n–ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é –Ω–∞–∂–º–∏—Ç–µ –ì–æ—Ç–æ–≤–æ üëå'
    await bot.delete_message(tel_id, message.message_id)
    await bot.send_message(tel_id, text=text, reply_markup=mk.otmena_plus, disable_notification=True, parse_mode='html')
    if str(await UsersDbManager.get_type(tel_id, loop)) == 'Online —Ä–µ—à–µ–Ω–∏–µ':
        text = '<i>–ü—Ä–∏—à–ª–∏—Ç–µ –ø—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã –∏–ª–∏ –ø–æ–¥–æ–±–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≤—ã–ø–æ–ª–Ω—è–ª–∏.</i>'
        await bot.send_message(tel_id, text=text, disable_notification=True, parse_mode='html')
    await UsersDbManager.update_oforml(tel_id, '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –≤–∏–¥', loop)
    await UsersDbManager.update_context(tel_id, 'wait_files', loop)


@dp.message_handler(lambda message: message.text in mk.g)
async def loc_m(message):
    tel_id = message.chat.id
    await UsersDbManager.update_predm(tel_id, message.text, loop)
    text = '<b>–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–ª–∏ —Ñ–æ—Ç–æ</b> üìé\n–ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é –Ω–∞–∂–º–∏—Ç–µ –ì–æ—Ç–æ–≤–æ üëå'
    await bot.delete_message(tel_id, message.message_id)
    await bot.send_message(tel_id, text=text, reply_markup=mk.otmena_plus, disable_notification=True, parse_mode='html')
    if str(await UsersDbManager.get_type(tel_id, loop)) == 'Online —Ä–µ—à–µ–Ω–∏–µ':
        text = '<i>–ü—Ä–∏—à–ª–∏—Ç–µ –ø—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã –∏–ª–∏ –ø–æ–¥–æ–±–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≤—ã–ø–æ–ª–Ω—è–ª–∏.</i>'
        await bot.send_message(tel_id, text=text, disable_notification=True, parse_mode='html')
    await UsersDbManager.update_oforml(tel_id, '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –≤–∏–¥', loop)
    await UsersDbManager.update_context(tel_id, 'wait_files', loop)


@dp.message_handler(lambda message: message.text in mk.e)
async def loc_m(message):
    tel_id = message.chat.id
    await UsersDbManager.update_predm(tel_id, message.text, loop)
    text = '<b>–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–ª–∏ —Ñ–æ—Ç–æ</b> üìé\n–ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é –Ω–∞–∂–º–∏—Ç–µ –ì–æ—Ç–æ–≤–æ üëå'
    await bot.delete_message(tel_id, message.message_id)
    await bot.send_message(tel_id, text=text, reply_markup=mk.otmena_plus, disable_notification=True, parse_mode='html')
    if str(await UsersDbManager.get_type(tel_id, loop)) == 'Online —Ä–µ—à–µ–Ω–∏–µ':
        text = '<i>–ü—Ä–∏—à–ª–∏—Ç–µ –ø—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã –∏–ª–∏ –ø–æ–¥–æ–±–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≤—ã–ø–æ–ª–Ω—è–ª–∏.</i>'
        await bot.send_message(tel_id, text=text, disable_notification=True, parse_mode='html')
    await UsersDbManager.update_oforml(tel_id, '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –≤–∏–¥', loop)
    await UsersDbManager.update_context(tel_id, 'wait_files', loop)


@dp.message_handler(lambda message: message.text in mk.l)
async def loc_m(message):
    tel_id = message.chat.id
    await UsersDbManager.update_predm(tel_id, message.text, loop)
    text = '<b>–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–ª–∏ —Ñ–æ—Ç–æ</b> üìé\n–ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é –Ω–∞–∂–º–∏—Ç–µ –ì–æ—Ç–æ–≤–æ üëå'
    await bot.delete_message(tel_id, message.message_id)
    await bot.send_message(tel_id, text=text, reply_markup=mk.otmena_plus, disable_notification=True, parse_mode='html')
    if str(await UsersDbManager.get_type(tel_id, loop)) == 'Online —Ä–µ—à–µ–Ω–∏–µ':
        text = '<i>–ü—Ä–∏—à–ª–∏—Ç–µ –ø—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã –∏–ª–∏ –ø–æ–¥–æ–±–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≤—ã–ø–æ–ª–Ω—è–ª–∏.</i>'
        await bot.send_message(tel_id, text=text, disable_notification=True, parse_mode='html')
    await UsersDbManager.update_oforml(tel_id, '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –≤–∏–¥', loop)
    await UsersDbManager.update_context(tel_id, 'wait_files', loop)


'''
text = '<b>–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–ª–∏ —Ñ–æ—Ç–æ</b> üìé\n–ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é –Ω–∞–∂–º–∏—Ç–µ –ì–æ—Ç–æ–≤–æ üëå'
    await bot.delete_message(tel_id, call.message.message_id)
    await bot.send_message(tel_id, text=text, reply_markup=mk.otmena_plus, disable_notification=True, parse_mode='html')
    if str(await UsersDbManager.get_type(tel_id, loop)) == 'Online —Ä–µ—à–µ–Ω–∏–µ':
        text = '<i>–ü—Ä–∏—à–ª–∏—Ç–µ –ø—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã –∏–ª–∏ –ø–æ–¥–æ–±–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≤—ã–ø–æ–ª–Ω—è–ª–∏.</i>'
        await bot.send_message(tel_id, text=text, disable_notification=True, parse_mode='html')
    await UsersDbManager.update_oforml(tel_id, '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –≤–∏–¥', loop)
    #await UsersDbManager.update_context(tel_id, 'wait_files', loop)
    
    text = f'<b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ</b> üôÉ\n<i>–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–º—É, –≤–∞—à –≤–∞—Ä–∏–∞–Ω—Ç, —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å, –∫-–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü</i>'
    await UsersDbManager.update_context(tel_id, 'wait_info', loop)
    await bot.send_message(tel_id, text=text, reply_markup=mk.otmena, disable_notification=True, parse_mode='html')
'''


@dp.message_handler(content_types=tp.ContentType.PHOTO)
async def sss1(message):
    tel_id = message.chat.id
    photo = None
    context = await UsersDbManager.get_context(tel_id, loop)
    ord_id = await UsersDbManager.get_ord_id(tel_id, loop)
    if context == 'wait_files':
        photo = message.photo[-1].file_id
        file_info = await bot.get_file(photo)
        file = requests.get('https://api.telegram.org/file/bot{0}/{1}'.format(TOKEN, file_info.file_path))
        pht = file.content

        await UsersDbManager.insert_ph_img_1(ord_id, pht, 'photto', loop)

        link = f'https://api.telegram.org/file/bot{TOKEN}/{file_info.file_path}'
        await UsersDbManager.update_links(ord_id, link, loop)

    elif context == 'online_work':
        ord_id = await UsersDbManager.get_ord_auth_2(tel_id, loop)
        author = await UsersDbManager.get_ord_auth(ord_id, loop)
        photo = message.photo[-1].file_id
        file_info = await bot.get_file(photo)
        file = requests.get('https://api.telegram.org/file/bot{0}/{1}'.format(TOKEN, file_info.file_path))
        pht = file.content
        await bot.send_photo(chat_id=author, photo=pht)

    elif context == 'wait_photo_opl':
        photo = message.photo[-1].file_id
        file_info = await bot.get_file(photo)
        file = requests.get('https://api.telegram.org/file/bot{0}/{1}'.format(TOKEN, file_info.file_path))
        pht = file.content
        num = await UsersDbManager.get_num(tel_id, loop)
        await ConfirmationOfOrders_bot.send_ph(num, pht)
        await UsersDbManager.update_context(tel_id, '', loop)

    elif context == 'wait_photo_opltwo':
        photo = message.photo[-1].file_id
        file_info = await bot.get_file(photo)
        file = requests.get('https://api.telegram.org/file/bot{0}/{1}'.format(TOKEN, file_info.file_path))
        pht = file.content
        num = await UsersDbManager.get_num(tel_id, loop)
        await ConfirmationOfOrders_bot.send_phtwo(num, pht)
        await UsersDbManager.update_context(tel_id, '', loop)


@dp.message_handler(content_types=tp.ContentType.DOCUMENT)
async def sss1(message):
    tel_id = message.chat.id
    doc = None
    context = await UsersDbManager.get_context(tel_id, loop)
    ord_id = await UsersDbManager.get_ord_id(tel_id, loop)
    if context == 'wait_files':
        doc = message.document.file_id
        file_info = await bot.get_file(doc)
        file = requests.get('https://api.telegram.org/file/bot{0}/{1}'.format(TOKEN, file_info.file_path))
        pht = file.content

        await UsersDbManager.insert_ph_img_1(ord_id, pht, message.document.file_name, loop)

        link = f'https://api.telegram.org/file/bot{TOKEN}/{file_info.file_path}'

        await UsersDbManager.update_links(ord_id, link, loop)


    elif context == 'online_work':
        ord_id = await UsersDbManager.get_ord_auth_2(tel_id, loop)
        author = await UsersDbManager.get_ord_auth(ord_id, loop)
        doc = message.document.file_id
        file_info = await bot.get_file(doc)
        file = requests.get('https://api.telegram.org/file/bot{0}/{1}'.format(TOKEN, file_info.file_path))
        pht = file.content
        await bot.send_document(chat_id=author, document=pht)


@dp.message_handler(lambda message: message.text == '–ì–æ—Ç–æ–≤–æ üëå')
async def loc_m(message):
    tel_id = message.chat.id
    text = '<b>–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Å–¥–∞—á–∏ —Ä–∞–±–æ—Ç—ã</b> üìÜ'
    await bot.send_message(tel_id, text=text, reply_markup=mk.datekb(), disable_notification=True, parse_mode='html')


@dp.message_handler(lambda message: message.text == '‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–∞–π–ª–æ–≤')
async def loc_m(message):
    tel_id = message.chat.id
    text = '<b>–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Å–¥–∞—á–∏ —Ä–∞–±–æ—Ç—ã</b> üìÜ'
    await bot.send_message(tel_id, text=text, reply_markup=mk.datekb(), disable_notification=True, parse_mode='html')


@dp.message_handler(lambda message: message.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ‚ùå')
async def loc_m(message):
    tel_id = message.chat.id
    text = '–ú–µ–Ω—é'
    await bot.send_message(tel_id, text=text, reply_markup=mk.main_menu_ru, disable_notification=True)
    await UsersDbManager.update_context(tel_id, '', loop)
    await UsersDbManager.delete_all(tel_id, loop)


monthes = {'1': '31', '2': '28', '3': '31', '4': '30', '5': '31',
           '6': '30',
           '7': '31', '8': '31', '9': '30', '10': '31', '11': '30',
           '12': '31'}


@dp.callback_query_handler(lambda c: c.data.startswith('datev_'))
async def process_call(c):
    tel_id = c.message.chat.id
    day = None
    month = None
    year = None
    if str(c.data[7]) == '!':
        day = str(c.data[6])
    elif str(c.data[7]) != '!':
        day = str(c.data[6]) + str(c.data[7])
    if str(c.data[7]) == '!' and str(c.data[10]) == '!':
        month = str(c.data[8]) + str(c.data[9])
    elif str(c.data[8]) == '!' and str(c.data[11]) == '!':
        month = str(c.data[9]) + str(c.data[10])
    elif str(c.data[7]) == '!' and str(c.data[9]) == '!':
        month = str(c.data[8])
    elif str(c.data[8]) == '!' and str(c.data[10]) == '!':
        month = str(c.data[9])
    year = str(c.data[-4:])

    m = monthes.get(month)
    if day == m:
        if month == '12':
            month = 1
            year = int(year) + 1
        else:
            await bot.edit_message_reply_markup(tel_id, c.message.message_id,
                                                reply_markup=mk.date_2(day=str(int(1)), month=str(int(month) + 1),
                                                                       year=str(int(year))))
    else:
        await bot.edit_message_reply_markup(tel_id, c.message.message_id,
                                            reply_markup=mk.date_2(day=str(int(day) + 1), month=str(int(month)),
                                                                   year=str(int(year))))


@dp.callback_query_handler(lambda c: c.data.startswith('mnthv_'))
async def process_call(c):
    tel_id = c.message.chat.id
    day = None
    month = None
    year = None
    if str(c.data[7]) == '!':
        day = str(c.data[6])
    elif str(c.data[7]) != '!':
        day = str(c.data[6]) + str(c.data[7])

    if str(c.data[7]) == '!' and str(c.data[10]) == '!':
        month = str(c.data[8]) + str(c.data[9])
    elif str(c.data[8]) == '!' and str(c.data[11]) == '!':
        month = str(c.data[9]) + str(c.data[10])
    elif str(c.data[7]) == '!' and str(c.data[9]) == '!':
        month = str(c.data[8])
    elif str(c.data[8]) == '!' and str(c.data[10]) == '!':
        month = str(c.data[9])

    year = str(c.data[-4:])
    print('day: ', day, ' month: ', int(month) + 1, ' year: ', year)

    await bot.edit_message_reply_markup(tel_id, c.message.message_id,
                                        reply_markup=mk.date_2(day=str(int(day)), month=str(int(month) + 1),
                                                               year=str(int(year))))


@dp.callback_query_handler(lambda c: c.data.startswith('yearv_'))
async def process_call(c):
    tel_id = c.message.chat.id
    day = None
    month = None
    year = None
    if str(c.data[7]) == '!':
        day = str(c.data[6])
    elif str(c.data[7]) != '!':
        day = str(c.data[6]) + str(c.data[7])
    if str(c.data[7]) == '!' and str(c.data[10]) == '!':
        month = str(c.data[8]) + str(c.data[9])
    elif str(c.data[8]) == '!' and str(c.data[11]) == '!':
        month = str(c.data[9]) + str(c.data[10])
    elif str(c.data[7]) == '!' and str(c.data[9]) == '!':
        month = str(c.data[8])
    elif str(c.data[8]) == '!' and str(c.data[10]) == '!':
        month = str(c.data[9])
    year = str(c.data[-4:])

    await bot.edit_message_reply_markup(tel_id, c.message.message_id,
                                        reply_markup=mk.date_2(day=str(int(day)), month=str(int(month)),
                                                               year=str(int(year) + 1)))


@dp.callback_query_handler(lambda c: c.data.startswith('daten_'))
async def process_call(c):
    tel_id = c.message.chat.id
    day = None
    month = None
    year = None
    if str(c.data[7]) == '!':
        day = str(c.data[6])
    elif str(c.data[7]) != '!':
        day = str(c.data[6]) + str(c.data[7])
    if str(c.data[7]) == '!' and str(c.data[10]) == '!':
        month = str(c.data[8]) + str(c.data[9])
    elif str(c.data[8]) == '!' and str(c.data[11]) == '!':
        month = str(c.data[9]) + str(c.data[10])
    elif str(c.data[7]) == '!' and str(c.data[9]) == '!':
        month = str(c.data[8])
    elif str(c.data[8]) == '!' and str(c.data[10]) == '!':
        month = str(c.data[9])
    year = str(c.data[-4:])

    m = monthes.get(month)
    print(month)
    if int(day) == 1:
        if month == '1':
            month = '12'
            year = int(year) - 1
        else:
            await bot.edit_message_reply_markup(tel_id, c.message.message_id,
                                                reply_markup=mk.date_2(day=str(m), month=str(int(month) - 1),
                                                                       year=str(int(year))))
    else:
        await bot.edit_message_reply_markup(tel_id, c.message.message_id,
                                            reply_markup=mk.date_2(day=str(int(day) - 1), month=str(int(month)),
                                                                   year=str(int(year))))


@dp.callback_query_handler(lambda c: c.data.startswith('mnthn_'))
async def process_call(c):
    tel_id = c.message.chat.id
    day = None
    month = None
    year = None
    if str(c.data[7]) == '!':
        day = str(c.data[6])
    elif str(c.data[7]) != '!':
        day = str(c.data[6]) + str(c.data[7])
    if str(c.data[7]) == '!' and str(c.data[10]) == '!':
        month = str(c.data[8]) + str(c.data[9])
    elif str(c.data[8]) == '!' and str(c.data[11]) == '!':
        month = str(c.data[9]) + str(c.data[10])
    elif str(c.data[7]) == '!' and str(c.data[9]) == '!':
        month = str(c.data[8])
    elif str(c.data[8]) == '!' and str(c.data[10]) == '!':
        month = str(c.data[9])
    year = str(c.data[-4:])

    await bot.edit_message_reply_markup(tel_id, c.message.message_id,
                                        reply_markup=mk.date_2(day=str(int(day)), month=str(int(month) - 1),
                                                               year=str(int(year))))


@dp.callback_query_handler(lambda c: c.data.startswith('yearn_'))
async def process_call(c):
    tel_id = c.message.chat.id
    day = None
    month = None
    year = None
    if str(c.data[7]) == '!':
        day = str(c.data[6])
    elif str(c.data[7]) != '!':
        day = str(c.data[6]) + str(c.data[7])
    if str(c.data[7]) == '!' and str(c.data[10]) == '!':
        month = str(c.data[8]) + str(c.data[9])
    elif str(c.data[8]) == '!' and str(c.data[11]) == '!':
        month = str(c.data[9]) + str(c.data[10])
    elif str(c.data[7]) == '!' and str(c.data[9]) == '!':
        month = str(c.data[8])
    elif str(c.data[8]) == '!' and str(c.data[10]) == '!':
        month = str(c.data[9])
    year = str(c.data[-4:])
    year = int(year) - 1

    curr_year = datetime.datetime.today().year

    if int(year) - 1 < int(curr_year):
        year = str(curr_year)

    try:
        await bot.edit_message_reply_markup(tel_id, c.message.message_id,
                                            reply_markup=mk.date_2(day=str(int(day)), month=str(int(month)),
                                                                   year=str(int(year))))
    except:
        qwe = None


@dp.callback_query_handler(lambda c: c.data.startswith('podtv_'))
async def process_call(c):
    tel_id = c.message.chat.id
    date = str(c.data[5:])
    dot = date.find('.')
    if date[int(dot) + 1] == '1':
        date = date
    else:
        p = date[:-6]
        date_2 = '0' + date[dot + 1:]
        date = p + date_2
    await UsersDbManager.update_date(tel_id, date, loop)
    text = '<b>–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è —Å–¥–∞—á–∏</b> ‚è∞'
    await bot.edit_message_text(text=text, chat_id=tel_id, message_id=c.message.message_id,
                                reply_markup=mk.timekb(tel_id, 2), parse_mode='html')


@dp.callback_query_handler(lambda c: c.data.startswith('hourp_'))
async def process_call(c):
    tel_id = c.message.chat.id
    hour = None
    minutes = None

    if str(c.data[7]) == '!':
        hour = str(c.data[6])

    elif str(c.data[7]) != '!':
        hour = str(c.data[6]) + str(c.data[7])

    if str(c.data[8]) == '!':
        try:
            minutes = str(c.data[9]) + str(c.data[10])
        except:
            minutes = str(c.data[9])
    elif str(c.data[7]) == '!':
        try:
            minutes = str(c.data[8]) + str(c.data[9])
        except:
            minutes = str(c.data[8])

    if int(hour) + 1 >= 23:
        hour = 23
    else:
        hour = int(hour) + 1

    s = str(await UsersDbManager.get_type(tel_id, loop))
    if s == 'Online —Ä–µ—à–µ–Ω–∏–µ' or s == '–¢–µ—Å—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ':
        s = True
    else:
        s = False
    time = UsersDbManager.get_time(tel_id)
    print('htime:', time)
    if time is None:
        print(None)
        await bot.edit_message_reply_markup(tel_id, c.message.message_id,
                                            reply_markup=mk.timekb_2(hour=str(hour), minutes=str(minutes), num=2,
                                                                     tel_id=tel_id))
    elif time is not None and s is True:
        text = '–í–æ —Å–∫–æ–ª—å–∫–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å—Å—è –∫–æ–Ω—Ç—Ä–æ–ª—å?'
        await bot.edit_message_text(text=text, chat_id=tel_id, message_id=c.message.message_id,
                                    reply_markup=mk.timekb_2(hour=str(hour), minutes=str(minutes), num=3,
                                                             tel_id=tel_id))


@dp.callback_query_handler(lambda c: c.data.startswith('minut_'))
async def process_call(c):
    tel_id = c.message.chat.id
    hour = None
    minutes = None

    if str(c.data[7]) == '!':
        hour = str(c.data[6])
    elif str(c.data[7]) != '!':
        hour = str(c.data[6]) + str(c.data[7])

    if str(c.data[8]) == '!':
        try:
            minutes = str(c.data[9]) + str(c.data[10])
        except:
            minutes = str(c.data[9])
    elif str(c.data[7]) == '!':
        try:
            minutes = str(c.data[8]) + str(c.data[9])
        except:
            minutes = str(c.data[8])

    if int(minutes) + 15 >= 60:
        minutes = (int(minutes) + 15) - 60
        if int(hour) + 1 >= 23:
            hour = 23
        else:
            hour = int(hour) + 1
    else:
        minutes = int(minutes) + 15

    s = str(await UsersDbManager.get_type(tel_id, loop))
    if s == 'Online —Ä–µ—à–µ–Ω–∏–µ' or s == '–¢–µ—Å—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ':
        s = True
    else:
        s = False
    time = UsersDbManager.get_time(tel_id)
    if time is None:
        await bot.edit_message_reply_markup(tel_id, c.message.message_id,
                                            reply_markup=mk.timekb_2(hour=str(hour), minutes=str(minutes), num=2,
                                                                     tel_id=tel_id))
    elif time is not None and s is True:
        text = '–í–æ —Å–∫–æ–ª—å–∫–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å—Å—è –∫–æ–Ω—Ç—Ä–æ–ª—å?'
        await bot.edit_message_text(text=text, chat_id=tel_id, message_id=c.message.message_id,
                                    reply_markup=mk.timekb_2(hour=str(hour), minutes=str(minutes), num=3,
                                                             tel_id=tel_id))


@dp.callback_query_handler(lambda c: c.data.startswith('hourm_'))
async def process_call(c):
    tel_id = c.message.chat.id
    hour = None
    minutes = None

    if str(c.data[7]) == '!':
        hour = str(c.data[6])

    elif str(c.data[7]) != '!':
        hour = str(c.data[6]) + str(c.data[7])

    if str(c.data[8]) == '!':
        try:
            minutes = str(c.data[9]) + str(c.data[10])
        except:
            minutes = str(c.data[9])
    elif str(c.data[7]) == '!':
        try:
            minutes = str(c.data[8]) + str(c.data[9])
        except:
            minutes = str(c.data[8])

    if int(hour) - 1 < 1:
        hour = 1
    else:
        hour = int(hour) - 1

    s = str(await UsersDbManager.get_type(tel_id, loop))
    if s == 'Online —Ä–µ—à–µ–Ω–∏–µ' or s == '–¢–µ—Å—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ':
        s = True
    else:
        s = False
    time = UsersDbManager.get_time(tel_id)
    if time is None:
        await bot.edit_message_reply_markup(tel_id, c.message.message_id,
                                            reply_markup=mk.timekb_2(hour=str(hour), minutes=str(minutes), num=2,
                                                                     tel_id=tel_id))
    elif time is not None and s is True:
        text = '–í–æ —Å–∫–æ–ª—å–∫–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å—Å—è –∫–æ–Ω—Ç—Ä–æ–ª—å?'
        await bot.edit_message_text(text=text, chat_id=tel_id, message_id=c.message.message_id,
                                    reply_markup=mk.timekb_2(hour=str(hour), minutes=str(minutes), num=3,
                                                             tel_id=tel_id))


@dp.callback_query_handler(lambda c: c.data.startswith('minum_'))
async def process_call(c):
    tel_id = c.message.chat.id
    hour = None
    minutes = None

    if str(c.data[7]) == '!':
        hour = str(c.data[6])
    elif str(c.data[7]) != '!':
        hour = str(c.data[6]) + str(c.data[7])

    if str(c.data[8]) == '!':
        try:
            minutes = str(c.data[9]) + str(c.data[10])
        except:
            minutes = str(c.data[9])
    elif str(c.data[7]) == '!':
        try:
            minutes = str(c.data[8]) + str(c.data[9])
        except:
            minutes = str(c.data[8])

    if int(minutes) - 15 < 0:
        minutes = (int(minutes) - 15)
        mint = int(minutes)
        minutes = 60 + int(mint)
        if int(hour) - 1 < 1:
            hour = 1
        else:
            hour = int(hour) - 1
    else:
        minutes = int(minutes) - 15

    s = str(await UsersDbManager.get_type(tel_id, loop))
    if s == 'Online —Ä–µ—à–µ–Ω–∏–µ' or s == '–¢–µ—Å—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ':
        s = True
    else:
        s = False
    time = UsersDbManager.get_time(tel_id)
    t = UsersDbManager.get_time_t(tel_id)
    if time is None:
        await bot.edit_message_reply_markup(tel_id, c.message.message_id,
                                            reply_markup=mk.timekb_2(hour=str(hour), minutes=str(minutes), num=2,
                                                                     tel_id=tel_id))
    elif time is not None and s is True and t is False:
        text = '–í–æ —Å–∫–æ–ª—å–∫–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å—Å—è –∫–æ–Ω—Ç—Ä–æ–ª—å?'
        await bot.edit_message_text(text=text, chat_id=tel_id, message_id=c.message.message_id,
                                    reply_markup=mk.timekb_2(hour=str(hour), minutes=str(minutes), num=3,
                                                             tel_id=tel_id))


@dp.callback_query_handler(lambda c: c.data.startswith('podtv2_'))
async def process_call(c):
    tel_id = c.message.chat.id
    date = str(c.data[6:])
    print('podtv_2')
    await UsersDbManager.update_time(tel_id, date, loop)
    s = str(await UsersDbManager.get_type(tel_id, loop))
    if s == 'Online —Ä–µ—à–µ–Ω–∏–µ' or s == '–¢–µ—Å—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ':
        s = True
    else:
        s = False
    t = UsersDbManager.get_time_t(tel_id)

    if s is True and t is False:
        text = '<b>–í–æ —Å–∫–æ–ª—å–∫–æ –∑–∞–∫–æ–Ω—á–∏—Ç—å—Å—è –∫–æ–Ω—Ç—Ä–æ–ª—å?</b>'
        await bot.edit_message_text(text=text, chat_id=tel_id, message_id=c.message.message_id,
                                    reply_markup=mk.timekb(num=3, tel_id=tel_id), parse_mode='html')
    else:
        await bot.delete_message(tel_id, c.message.message_id)
        text = f'<b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ</b> üôÉ\n<i>–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–º—É, –≤–∞—à –≤–∞—Ä–∏–∞–Ω—Ç, —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å, –∫-–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü</i>'
        await UsersDbManager.update_context(tel_id, 'wait_info', loop)
        await bot.send_message(tel_id, text=text, reply_markup=mk.otmena, disable_notification=True, parse_mode='html')


@dp.callback_query_handler(lambda c: c.data.startswith('podtv3_'))
async def process_call(c):
    tel_id = c.message.chat.id
    date = str(c.data[6:])
    await UsersDbManager.update_end_contr(tel_id, date, loop)
    await bot.delete_message(tel_id, c.message.message_id)

    text = f'<b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ</b> üôÉ\n<i>–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–º—É, –≤–∞—à –≤–∞—Ä–∏–∞–Ω—Ç, —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å, –∫-–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü</i>'
    await UsersDbManager.update_context(tel_id, 'wait_info', loop)
    await bot.send_message(tel_id, text=text, reply_markup=mk.otmena, disable_notification=True, parse_mode='html')


@dp.message_handler(lambda message:
                    UsersDbManager.sync_get_context(message.chat.id) == 'wait_info')
async def wait_name(message):
    tel_id = message.chat.id
    await UsersDbManager.update_info(tel_id, message.text, loop)
    text = '<b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–º –≤–∏–¥–µ –∏–ª–∏ –æ—Ç —Ä—É–∫–∏?</b>\n\n<i>–ß–∞—â–µ –≤—Å–µ–≥–æ –æ—Ç —Ä—É–∫–∏ –¥–µ—à–µ–≤–ª–µ, –Ω–æ –Ω–µ –≤—Å–µ–≥–¥–∞</i> üòâ'
    await bot.send_message(tel_id, text=text, reply_markup=mk.otr(), disable_notification=True, parse_mode='html')


@dp.callback_query_handler(lambda call:
                           call.data.startswith('ruk'))
async def count_yes(call):
    tel_id = call.message.chat.id
    text = '<b>–ü—Ä–∏—à–ª–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –∑–∞–¥–∞–Ω–∏–µ</b> üí∏'
    text_2 = '<i>–ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞–∂–º–∏—Ç–µ ‚Üì</i>'
    await bot.send_message(tel_id, text=text, reply_markup=mk.otmena, disable_notification=True, parse_mode='html')
    await bot.send_message(tel_id, text=text_2, reply_markup=mk.dogov(), disable_notification=True, parse_mode='html')
    await UsersDbManager.update_oforml(tel_id, '–û—Ç —Ä—É–∫–∏', loop)
    await UsersDbManager.update_context(tel_id, 'wait_price', loop)


@dp.callback_query_handler(lambda call:
                           call.data.startswith('elect'))
async def count_yes(call):
    tel_id = call.message.chat.id
    await UsersDbManager.update_oforml(tel_id, '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –≤–∏–¥', loop)
    text = '<b>–ü—Ä–∏—à–ª–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –∑–∞–¥–∞–Ω–∏–µ</b> üí∏'
    text_2 = '<i>–ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞–∂–º–∏—Ç–µ ‚Üì</i>'
    await bot.send_message(tel_id, text=text, reply_markup=mk.otmena, disable_notification=True, parse_mode='html')
    await bot.send_message(tel_id, text=text_2, reply_markup=mk.dogov(), disable_notification=True, parse_mode='html')
    await UsersDbManager.update_context(tel_id, 'wait_price', loop)


@dp.callback_query_handler(lambda call:
                           call.data.startswith('ne_prcpl'))
async def count_yes(call):
    tel_id = call.message.chat.id
    await UsersDbManager.update_oforml(tel_id, '–ù–µ –ø—Ä–∏–Ω—Ü–∏–ø–∏–∞–ª—å–Ω–æ', loop)
    text = '<b>–ü—Ä–∏—à–ª–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –∑–∞–¥–∞–Ω–∏–µ</b> üí∏'
    text_2 = '<i>–ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –Ω–∞–∂–º–∏—Ç–µ ‚Üì</i>'
    await bot.send_message(tel_id, text=text, reply_markup=mk.otmena, disable_notification=True, parse_mode='html')
    await bot.send_message(tel_id, text=text_2, reply_markup=mk.dogov(), disable_notification=True, parse_mode='html')
    await UsersDbManager.update_context(tel_id, 'wait_price', loop)


@dp.message_handler(lambda message:
                    UsersDbManager.sync_get_context(message.chat.id) == 'wait_price')
async def wait_name(message):
    tel_id = message.chat.id
    await UsersDbManager.update_price(tel_id, message.text, loop)
    await bot.delete_message(tel_id, message.message_id)
    text = '–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è <i>–Ω–∞–∂–º–∏—Ç–µ</i> –ì–æ—Ç–æ–≤–æ üôå'
    await bot.send_message(tel_id, text=text, reply_markup=mk.got(), disable_notification=True, parse_mode='html')
    await UsersDbManager.update_context(tel_id, '', loop)


@dp.callback_query_handler(lambda c: c.data.startswith('dogov'))
async def process_call(c):
    tel_id = c.message.chat.id
    await UsersDbManager.update_price(tel_id, '–î–æ–≥–æ–≤–æ—Ä–Ω–∞—è', loop)
    text = '–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è <i>–Ω–∞–∂–º–∏—Ç–µ</i> –ì–æ—Ç–æ–≤–æ üôå'
    await bot.edit_message_text(text=text, chat_id=tel_id, message_id=c.message.message_id,
                                reply_markup=mk.got(), parse_mode='html')


def detect_numbers(text):
    l = []
    phone_regex = re.compile(r"(\+380)?\s*?(\d{3})\s*?(\d{3})\s*?(\d{3})")
    groups = phone_regex.findall(text)
    for g in groups:
        l.append(g)
    a = ''
    try:
        a = re.search("(?P<url>t.me?/[^\s]+)", text).group("url")
    except:
        a = ''
    if len(a) != 0:
        l.append(a)
    sob = text.find('@')
    if sob != -1:
        l.append(sob)
    return l


@dp.callback_query_handler(lambda c: c.data.startswith('got'))
async def process_call(c):
    tel_id = c.message.chat.id
    # await bot.delete_message(tel_id, c.message.message_id-1)
    order_info = await UsersDbManager.get_order(tel_id, loop)
    user_info = await UsersDbManager.get_user(tel_id, loop)
    n = detect_numbers(order_info[5])
    if len(n) > 0:
        await bot.send_message(tel_id, text='–ü–æ—Å—Ç –±—ã–ª –∑–∞–±—Ä–∞–∫–æ–≤–∞–Ω –±–æ—Ç–æ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é üò≥',
                               reply_markup=mk.main_menu_ru)
    else:
        s = str(await UsersDbManager.get_type(tel_id, loop))
        if s == 'Online —Ä–µ—à–µ–Ω–∏–µ' or s == '–¢–µ—Å—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ':
            s = True
        else:
            s = False
        if s is True:
            text = f'‚ú® –ó–∞–∫–∞–∑ ‚Ññ{order_info[0]} ‚ú®\n\n' \
                   f'<b>{order_info[4]}</b>\n' \
                   f'<b>{order_info[2]}</b>\n\n' \
                   f'–°—Ä–æ–∫ —Å–¥–∞—á–∏: {order_info[7]}\n{order_info[8]}-{order_info[9]}\n' \
                   f'–¶–µ–Ω–∞: {order_info[10]}\n\n' \
                   f'–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ: {order_info[6]}\n' \
                   f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order_info[5]}' \
                   f'\n\n–ü—Ä–∏–∫—Ä–∏–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: '
            kb = tp.ReplyKeyboardRemove()
            await bot.delete_message(tel_id, c.message.message_id)
            await bot.send_message(tel_id, text=text, reply_markup=mk.main_menu_ru, disable_notification=True,
                                   parse_mode='html', )
            await send_files(tel_id, order_info[0])

            text = '<b>–ü–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –æ—Ü–µ–Ω–∏—Ç—å –≤–∞—à –∑–∞–∫–∞–∑</b> üöÄ\n' \
                   '<i>–û—Ü–µ–Ω–∏–≤–∞–µ–º –≤ —Ç–µ—á–µ–Ω–∏–∏ 2 —á–∞—Å–æ–≤. –í—ã –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –º—ã –ø—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ —Ä–∞–±–æ—Ç–µ.</i>\n' \
                   '<b>–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑?</b> –û—Ç–ø–∏—à–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É ‚¨áÔ∏è'
            await bot.send_message(tel_id, text=text, reply_markup=mk.manager(), disable_notification=True,
                                   parse_mode='html')
        else:
            text = f'‚ú® –ó–∞–∫–∞–∑ ‚Ññ{order_info[0]} ‚ú®\n\n' \
                   f'<b>{order_info[4]}</b>\n' \
                   f'<b>{order_info[2]}</b>\n\n' \
                   f'–°—Ä–æ–∫ —Å–¥–∞—á–∏: {order_info[7]} {order_info[8]}\n' \
                   f'–¶–µ–Ω–∞: {order_info[10]}\n\n' \
                   f'–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ: {order_info[6]}\n' \
                   f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order_info[5]}' \
                   f'\n\n–ü—Ä–∏–∫—Ä–∏–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: '
            kb = tp.ReplyKeyboardRemove()
            await bot.delete_message(tel_id, c.message.message_id)
            await bot.send_message(tel_id, text=text, reply_markup=mk.main_menu_ru, disable_notification=True,
                                   parse_mode='html')
            await send_files(tel_id, order_info[0])

            text = '<b>–ü–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –æ—Ü–µ–Ω–∏—Ç—å –≤–∞—à –∑–∞–∫–∞–∑</b> üöÄ\n' \
                   '<i>–û—Ü–µ–Ω–∏–≤–∞–µ–º –≤ —Ç–µ—á–µ–Ω–∏–∏ 2 —á–∞—Å–æ–≤. –í—ã –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –º—ã –ø—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ —Ä–∞–±–æ—Ç–µ.</i>\n' \
                   '<b>–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑?</b> –û—Ç–ø–∏—à–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É ‚¨áÔ∏è'
            await bot.send_message(tel_id, text=text, reply_markup=mk.manager(), disable_notification=True,
                                   parse_mode='html')
    await UsersDbManager.update_context(tel_id, '', loop)
    await author_bot.send_new_order(order_info[0])


async def send_files(tel_id, order_id):
    docs = await UsersDbManager.get_docs(order_id, loop)
    ph = []
    if docs == False:
        await bot.send_message(tel_id, text='–ù–µ—Ç –ø—Ä–∏–∫—Ä–∏–ø–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤', disable_notification=True)
    else:
        for doc in docs:
            if doc[2] == 'photto':
                await bot.send_photo(tel_id, photo=doc[1])
            else:
                await bot.send_document(tel_id, document=doc[1])


@dp.message_handler(lambda message: message.text == '–ú–æ–∏ –∑–∞–∫–∞–∑—ã üõí')
async def loc_m(message):
    tel_id = message.chat.id
    orders = await UsersDbManager.get_o_orders(tel_id, loop)
    active_ord = await UsersDbManager.get_act_orders(tel_id, loop)
    user_info = await UsersDbManager.get_user(tel_id, loop)

    if active_ord == False:
        if orders == False:
            text = '–í—ã –µ—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–∫–∞–∑—ã–≤–∞–ª–∏ üòÅ'
            await bot.send_message(tel_id, text=text, reply_markup=mk.main_menu_ru, disable_notification=True)
        else:
            for order in orders:
                text = f'‚ú® –ó–∞–∫–∞–∑ ‚Ññ{order[0]} ‚ú®\n\n' \
                       f'<b>{order[4]}</b>\n' \
                       f'<b>{order[2]}</b>\n\n' \
                       f'–°—Ä–æ–∫ —Å–¥–∞—á–∏: {order[7]} {order[8]}\n' \
                       f'–¶–µ–Ω–∞: {order[10]}\n\n' \
                       f'–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ: {order[6]}\n' \
                       f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order[5]}' \
                       f'\n\n–ü—Ä–∏–∫—Ä–∏–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:'
                await bot.send_message(tel_id, text=text, reply_markup=mk.main_menu_ru, disable_notification=True,
                                       parse_mode='html')
                await send_files(tel_id, order[0])
    else:
        order_info = await UsersDbManager.get_order(tel_id, loop)
        text = f'‚ú® –ó–∞–∫–∞–∑ ‚Ññ{order_info[0]} ‚ú®\n\n' \
               f'<b>{order_info[4]}</b>\n' \
               f'<b>{order_info[2]}</b>\n\n' \
               f'–°—Ä–æ–∫ —Å–¥–∞—á–∏: {order_info[7]} {order_info[8]}\n' \
               f'–¶–µ–Ω–∞: {order_info[10]}\n\n' \
               f'–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ: {order_info[6]}\n' \
               f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order_info[5]}' \
               f'\n\n–ü—Ä–∏–∫—Ä–∏–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: '
        await bot.send_message(tel_id, text=text, reply_markup=mk.main_menu_ru, disable_notification=True,
                               parse_mode='html')
        await send_files(tel_id, order_info[0])


@dp.message_handler(lambda message: message.text == '–°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º üì±')
async def loc_m(message):
    tel_id = message.chat.id
    text = '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º ‚¨áÔ∏è'
    await bot.send_message(tel_id, text=text, reply_markup=mk.get_sv(), disable_notification=True)


@dp.callback_query_handler(lambda c: c.data.startswith('manager'))
async def process_call(c):
    tel_id = c.message.chat.id
    text = '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º ‚¨áÔ∏è'
    await bot.send_message(tel_id, text=text, reply_markup=mk.get_sv(), disable_notification=True)


@dp.callback_query_handler(lambda c: c.data.startswith('call_man'))
async def process_call(c):
    tel_id = c.message.chat.id
    text = '+380634690637'
    await bot.send_message(tel_id, text=text, reply_markup=mk.main_menu_ru, disable_notification=True)


@dp.callback_query_handler(lambda c: c.data.startswith('textman'))
async def process_call(c):
    tel_id = c.message.chat.id
    text = '–í —á–∞—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä üöÄ'
    await bot.send_message(tel_id, text=text, reply_markup=mk.otm_manager, disable_notification=True)


@dp.message_handler(lambda message: message.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º‚ùå')
async def loc_m(message):
    tel_id = message.chat.id
    text = '–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç üëã\n\n‚ùóÔ∏è–ë–æ—Ç –Ω–µ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∏–∫–∞–∫–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏‚ùóÔ∏è‚Ä®\n\n–ï—Å–ª–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏'
    await bot.send_message(tel_id, text=text,
                           reply_markup=mk.main_menu_ru, disable_notification=True)


async def send_time(tel_id):
    text = '<b>–î–æ –æ–Ω–ª–∞–π–Ω —Ä–∞–±–æ—Ç—ã –æ—Å—Ç–∞–ª–æ—Å—å 20 –º–∏–Ω.</b>\n' \
           '–ù–µ —Å–∫–∏–¥—ã–≤–∞–π—Ç–µ –≤ —á–∞—Ç –Ω–∏—á–µ–≥–æ –¥–æ —Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞, –ø–æ–∫–∞ –≤—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞'
    await bot.send_message(tel_id, text=text, reply_markup=mk.online_kb(), parse_mode='html')


@dp.callback_query_handler(lambda c: c.data.startswith('get_author'))
async def process_call(c):
    tel_id = c.message.chat.id
    ord_id = await UsersDbManager.get_ord_auth_2(tel_id, loop)
    author = await UsersDbManager.get_ord_auth(ord_id, loop)
    text = '<b>–í —á–∞—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∞–≤—Ç–æ—Ä</b> üöÄ\n' \
           '–°–∫–∏–Ω—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ –±–∏–ª–µ—Ç–∞'
    await bot.send_message(tel_id, text=text, reply_markup=mk.author_otm, parse_mode='html')

    text_2 = '<b>–í—ã –≤–æ—à–ª–∏ –≤ —á–∞—Ç —Å –∑–∞–∫–∞–∑—á–∏–∫–æ–º.</b>\n' \
             '–ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –∫–æ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞ –±—É–¥–µ—Ç –∑–∞–∫–æ–Ω—á–µ–Ω–∞, –º–æ–∂–µ—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å —á–∞—Ç.\n' \
             '–ï—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è, –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑.'
    await bot.send_message(author, text=text_2, parse_mode='html', reply_markup=mk2.onl_2)
    await UsersDbManager.update_context_a(author, 'online_work', loop)
    await UsersDbManager.update_context(tel_id, 'online_work', loop)


@dp.message_handler(lambda message:
                    UsersDbManager.sync_get_context(message.chat.id) == 'online_work')
async def wait_name(message):
    tel_id = message.chat.id
    ord_id = await UsersDbManager.get_ord_auth_2(tel_id, loop)
    author = await UsersDbManager.get_ord_auth(ord_id, loop)
    await bot.send_message(author, text=message.text)


@dp.callback_query_handler(lambda c: c.data.startswith('no_online'))
async def process_call(c):
    tel_id = c.message.chat.id
    text = '–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–ª–∏. –£–¥–∞—á–∏!'
    text_2 = '–ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É‚¨áÔ∏è'
    await bot.send_message(tel_id, text=text, reply_markup=mk.main_menu_ru, disable_notification=True)
    await bot.send_message(tel_id, text=text_2, reply_markup=mk.send_man(), disable_notification=True)
    await UsersDbManager.update_context(tel_id, 'context', loop)

    ord_id = await UsersDbManager.get_ord_auth_2(tel_id, loop)
    await UsersDbManager.delete_order(ord_id, loop)


@dp.message_handler(lambda message: message.text == '–û–Ω–ª–∞–π–Ω —Ä–∞–±–æ—Ç–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞  ‚ùå')
async def loc_m(message):
    tel_id = message.chat.id
    ord_id = await UsersDbManager.get_ord_auth_2(tel_id, loop)
    author = await UsersDbManager.get_ord_auth(ord_id, loop)

    text = 'oko'
    await bot.send_message(tel_id, text=text)
    await UsersDbManager.update_context(tel_id, '', loop)

    await UsersDbManager.update_context_a(author, '', loop)


@dp.callback_query_handler(lambda c: c.data.startswith('pay_'))
async def process_call(c):
    tel_id = c.message.chat.id
    ord_id = c.data[3:]
    await UsersDbManager.add_num(tel_id, ord_id, loop)

    text = '<b>–û–ø–ª–∞—Ç–∏—Ç—å –º–æ–∂–Ω–æ:</b>\n' \
           '‚úîÔ∏è <b>–ü—Ä–∏–≤–∞—Ç–±–∞–Ω–∫</b> (–û–≥–∏–Ω—Å–∫–∞—è –ê–Ω–Ω–∞)\n' \
           '4149 6293 1543 9281\n\n' \
           '–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω —Å –æ–ø–ª–∞—Ç–æ–π –∑–∞–∫–∞–∑–∞'
    await bot.send_message(tel_id, text=text, reply_markup=mk.manager(), parse_mode='html', disable_notification=True)
    await UsersDbManager.update_context(tel_id, 'wait_photo_opl', loop)

@dp.callback_query_handler(lambda c: c.data.startswith('payb_'))
async def process_call(c):
    tel_id = c.message.chat.id
    ord_id = c.data[4:]
    cost = await UsersDbManager.update_and_get_cost(tel_id, ord_id, loop)
    await UsersDbManager.add_num(tel_id, ord_id, loop)
    text_0 = f'–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –±–æ–Ω—É—Å—ã –∫ –æ–ø–ª–∞—Ç–µ.\n' \
             f'–í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–ª–∞—Ç–∏—Ç—å <i>{cost}</i> –≥—Ä–Ω.'

    text = '<b>–û–ø–ª–∞—Ç–∏—Ç—å –º–æ–∂–Ω–æ:</b>\n' \
           '‚úîÔ∏è <b>–ü—Ä–∏–≤–∞—Ç–±–∞–Ω–∫</b> (–û–≥–∏–Ω—Å–∫–∞—è –ê–Ω–Ω–∞)\n' \
           '4149 6293 1543 9281\n\n' \
           '–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω —Å –æ–ø–ª–∞—Ç–æ–π –∑–∞–∫–∞–∑–∞'
    await bot.send_message(tel_id, text=text, reply_markup=mk.manager(), parse_mode='html', disable_notification=True)
    await UsersDbManager.update_context(tel_id, 'wait_photo_opl', loop)


@dp.callback_query_handler(lambda c: c.data.startswith('paytwo_'))
async def process_call(c):
    tel_id = c.message.chat.id
    ord_id = c.data[6:]
    await UsersDbManager.add_num(tel_id, ord_id, loop)

    text = '<b>–û–ø–ª–∞—Ç–∏—Ç—å –º–æ–∂–Ω–æ:</b>\n' \
           '‚úîÔ∏è <b>–ü—Ä–∏–≤–∞—Ç–±–∞–Ω–∫</b> (–û–≥–∏–Ω—Å–∫–∞—è –ê–Ω–Ω–∞)\n' \
           '4149 6293 1543 9281\n\n' \
           '–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω —Å –æ–ø–ª–∞—Ç–æ–π –∑–∞–∫–∞–∑–∞'
    await bot.send_message(tel_id, text=text, reply_markup=mk.manager(), parse_mode='html', disable_notification=True)
    await UsersDbManager.update_context(tel_id, 'wait_photo_opltwo', loop)


async def confirm_fifty(tel_id, ord_id, money):
    order_info = await UsersDbManager.get_priceo_order(ord_id, loop)
    text = f'<b>–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É –≤ —Ä–∞–∑–º–µ—Ä–µ</b> üíµ <b>{money} –≥—Ä–Ω</b> üíµ \n\n' \
           f'<b>–ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{ord_id}</b> üöÄ\n' \
           f'<b>–¢–∏–ø —Ä–∞–±–æ—Ç—ã: </b>{order_info[2]}\n' \
           f'<b>–ü—Ä–µ–¥–º–µ—Ç:</b> {order_info[4]}\n' \
           f'üíµ <b>–ö –æ–ø–ª–∞—Ç–µ –µ—â–µ <i>{money}</i> –≥—Ä–Ω</b> üíµ'
    await bot.send_message(tel_id, text=text, reply_markup=mk.pay(ord_id[1:]), parse_mode='html')

    text_2 = f'<b>–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø—Ä–∏—Å—Ç—É–ø–∏–ª –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞ ‚Ññ{ord_id[1:]}</b>üöÄ'
    await bot.send_message(tel_id, text=text_2, parse_mode='html')
    await UsersDbManager.active_o(ord_id[1:], money, loop)


async def confirm_fifty_2(tel_id, ord_id, money):
    order_info = await UsersDbManager.get_wait_order(ord_id, loop)
    ord_id = ord_id[1:]
    print(ord_id)
    print(order_info)
    text = f'<b>–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –æ–ø–ª–∞—Ç—É –≤ —Ä–∞–∑–º–µ—Ä–µ</b> üíµ <b>{money} –≥—Ä–Ω</b> üíµ \n\n' \
           f'<b>–ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{ord_id}</b> üöÄ\n' \
           f'<b>–¢–∏–ø —Ä–∞–±–æ—Ç—ã: </b>{order_info[2]}\n' \
           f'<b>–ü—Ä–µ–¥–º–µ—Ç:</b> {order_info[4]}\n'
    await bot.send_message(tel_id, text=text, reply_markup=mk.pay(ord_id), parse_mode='html')

    text_2 = f'üéä <b>–í–∞—à–∞ —Ä–æ–±–æ—Ç–∞ –≥–æ—Ç–æ–≤–∞!</b> üéä\n<b>–ó–∞–∫–∞–∑ ‚Ññ{ord_id}</b>'
    await bot.send_message(tel_id, text=text_2, parse_mode='html')
    links = await UsersDbManager.get_links(ord_id, loop)
    links = str(links)
    links = links.split(' , ')
    text_l = None
    for link in links:
        text_l += f'{link}\n\n'
    await bot.send_message(tel_id, text=text_l, parse_mode='html')

    text_3 = '‚ù§Ô∏è –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å Reshalla ‚ù§Ô∏è' \
             '\n–ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏ —Å–æ —Å–¥–∞—á–µ–π —Ä–∞–±–æ—Ç—ã!' \
             '\n–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? üëá'
    await bot.send_message(tel_id, text=text_3, reply_markup=mk.manager(), parse_mode='html')

    text_4 = '<b>–ù–∞—Å–∫–æ–ª—å–∫–æ –í—ã –¥–æ–≤–æ–ª—å–Ω—ã –Ω–∞—à–µ–π —Ä–∞–±–æ—Ç–æ–π?</b>\n' \
             '–í—ã–±–µ—Ä–∏—Ç–µ —Ü–∏—Ñ—Ä—É –æ—Ç 1 –¥–æ 5	üôå'
    await bot.send_message(tel_id, text=text_4, reply_markup=mk.otz(ord_id), parse_mode='html')
    await UsersDbManager.add_num(tel_id, ord_id, loop)


async def confirm_all(tel_id, ord_id, money):
    bonuses = int(money) / (100 * 1)
    order_info = await UsersDbManager.get_priceo_order(ord_id, loop)
    ord_id = ord_id[1:]
    text = f'<b>–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –æ–ø–ª–∞—Ç—É</b> üíµ <b>{money} –≥—Ä–Ω</b> üíµ \n\n' \
           f'<b>–ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{ord_id}</b> üöÄ\n' \
           f'<b>–¢–∏–ø —Ä–∞–±–æ—Ç—ã: </b>{order_info[2]}\n' \
           f'<b>–ü—Ä–µ–¥–º–µ—Ç:</b> {order_info[4]}\n' \
           f'<b>–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω—ã –±–æ–Ω—É—Å—ã –≤ —Ä–∞–∑–º–µ—Ä–µ <i>{bonuses}</i> –≥—Ä–Ω.</b>'

    await bot.send_message(tel_id, text=text, parse_mode='html')

    text_2 = f'<b>–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø—Ä–∏—Å—Ç—É–ø–∏–ª –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞ ‚Ññ{ord_id}</b>üöÄ'
    await bot.send_message(tel_id, text=text_2, parse_mode='html')


async def dopl_yes(tel_id, ord_id, money):
    order_info = await UsersDbManager.get_wait_order(ord_id, loop)
    bonuses = int(money) / (100 * 1)

    text = f'<b>–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –æ–ø–ª–∞—Ç—É</b> üíµ <b>{money} –≥—Ä–Ω</b> üíµ \n\n' \
           f'<b>–ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{ord_id}</b> üöÄ\n' \
           f'<b>–¢–∏–ø —Ä–∞–±–æ—Ç—ã: </b>{order_info[2]}\n' \
           f'<b>–ü—Ä–µ–¥–º–µ—Ç:</b> {order_info[4]}\n' \
           f'<b>–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω—ã –±–æ–Ω—É—Å—ã –≤ —Ä–∞–∑–º–µ—Ä–µ <i>{bonuses}</i> –≥—Ä–Ω.</b>'
    await bot.send_message(tel_id, text=text, parse_mode='html')

    text_2 = f'üéä <b>–í–∞—à–∞ —Ä–æ–±–æ—Ç–∞ –≥–æ—Ç–æ–≤–∞!</b> üéä\n<b>–ó–∞–∫–∞–∑ ‚Ññ{ord_id}</b>'
    await bot.send_message(tel_id, text=text_2, parse_mode='html')
    links = await UsersDbManager.get_links(ord_id, loop)
    links = str(links)
    links = links.split(' , ')
    text_l = ''
    for link in links:
        text_l = str(text_l) +  str(f'{link}\n\n')
    await bot.send_message(tel_id, text=text_l, parse_mode='html')

    text_3 = '‚ù§Ô∏è –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å Reshalla ‚ù§Ô∏è' \
             '\n–ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏ —Å–æ —Å–¥–∞—á–µ–π —Ä–∞–±–æ—Ç—ã!' \
             '\n–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? üëá'
    await bot.send_message(tel_id, text=text_3, reply_markup=mk.manager(), parse_mode='html')

    text_4 = '<b>–ù–∞—Å–∫–æ–ª—å–∫–æ –í—ã –¥–æ–≤–æ–ª—å–Ω—ã –Ω–∞—à–µ–π —Ä–∞–±–æ—Ç–æ–π?</b>\n' \
             '–í—ã–±–µ—Ä–∏—Ç–µ —Ü–∏—Ñ—Ä—É –æ—Ç 1 –¥–æ 5	üôå'
    await bot.send_message(tel_id, text=text_4, reply_markup=mk.otz(ord_id), parse_mode='html')
    await UsersDbManager.add_num(tel_id, ord_id, loop)



@dp.callback_query_handler(lambda c: c.data.startswith('one_'))
async def process_call(c):
    tel_id = c.message.chat.id
    ord_id = c.data[4:]
    text = '<b>–í–∞—à –≤—ã–±–æ—Ä: 1</b>\n' \
           '<b>–ù–∞–º –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –í–∞—à–µ –º–Ω–µ–Ω–∏–µ!</b>\n' \
           '–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∑—ã–≤ üôè'
    await UsersDbManager.update_context(tel_id, 'wait_com_ord', loop)
    await bot.send_message(tel_id, text=text, reply_markup=mk.otm_otz(), disable_notification=True, parse_mode='html')
    await UsersDbManager.doneo(ord_id, 1, loop)


@dp.callback_query_handler(lambda c: c.data.startswith('two_'))
async def process_call(c):
    tel_id = c.message.chat.id
    ord_id = c.data[4:]
    text = '<b>–í–∞—à –≤—ã–±–æ—Ä: 2</b>\n' \
           '<b>–ù–∞–º –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –í–∞—à–µ –º–Ω–µ–Ω–∏–µ!</b>\n' \
           '–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∑—ã–≤ üôè'
    await UsersDbManager.update_context(tel_id, 'wait_com_ord', loop)
    await bot.send_message(tel_id, text=text, reply_markup=mk.otm_otz(), disable_notification=True, parse_mode='html')
    await UsersDbManager.doneo(ord_id, 2, loop)


@dp.callback_query_handler(lambda c: c.data.startswith('three_'))
async def process_call(c):
    tel_id = c.message.chat.id
    ord_id = c.data[6:]
    text = '<b>–í–∞—à –≤—ã–±–æ—Ä: 3</b>\n' \
           '<b>–ù–∞–º –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –í–∞—à–µ –º–Ω–µ–Ω–∏–µ!</b>\n' \
           '–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∑—ã–≤ üôè'
    await UsersDbManager.update_context(tel_id, 'wait_com_ord', loop)
    await bot.send_message(tel_id, text=text, reply_markup=mk.otm_otz(), disable_notification=True, parse_mode='html')
    await UsersDbManager.doneo(ord_id, 3, loop)


@dp.callback_query_handler(lambda c: c.data.startswith('four_'))
async def process_call(c):
    tel_id = c.message.chat.id
    ord_id = c.data[5:]
    text = '<b>–í–∞—à –≤—ã–±–æ—Ä: 4</b>\n' \
           '<b>–ù–∞–º –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –í–∞—à–µ –º–Ω–µ–Ω–∏–µ!</b>\n' \
           '–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∑—ã–≤ üôè'
    await UsersDbManager.update_context(tel_id, 'wait_com_ord', loop)
    await bot.send_message(tel_id, text=text, reply_markup=mk.otm_otz(), disable_notification=True, parse_mode='html')
    await UsersDbManager.doneo(ord_id, 4, loop)


@dp.callback_query_handler(lambda c: c.data.startswith('five_'))
async def process_call(c):
    tel_id = c.message.chat.id
    ord_id = c.data[5:]
    text = '<b>–í–∞—à –≤—ã–±–æ—Ä: 5</b>\n' \
           '<b>–ù–∞–º –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –í–∞—à–µ –º–Ω–µ–Ω–∏–µ!</b>\n' \
           '–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∑—ã–≤ üôè'
    await UsersDbManager.update_context(tel_id, 'wait_com_ord', loop)
    await bot.send_message(tel_id, text=text, reply_markup=mk.otm_otz(), disable_notification=True, parse_mode='html')
    await UsersDbManager.doneo(ord_id, 5, loop)


@dp.message_handler(lambda message:
                    UsersDbManager.sync_get_context(message.chat.id) == 'wait_com_ord')
async def wait_name(message):
    tel_id = message.chat.id
    text = message.text
    ord_id = await UsersDbManager.get_num(tel_id, loop)
    await UsersDbManager.update_com(ord_id, text, loop)
    text_2 = '–°–ø–∞—Å–∏–±–æ!'
    await bot.send_message(tel_id, text=text_2, reply_markup=mk.main_menu_ru)
    await UsersDbManager.update_context(tel_id, '', loop)


@dp.callback_query_handler(lambda c: c.data.startswith('otm_otz'))
async def process_call(c):
    tel_id = c.message.chat.id
    ord_id = await UsersDbManager.get_num(tel_id, loop)
    await UsersDbManager.update_context(tel_id, '', loop)
    text_2 = '–°–ø–∞—Å–∏–±–æ!'
    await bot.send_message(tel_id, text=text_2, reply_markup=mk.main_menu_ru)

@dp.callback_query_handler(lambda c: c.data.startswith('otmena_'))
async def process_call(c):
    tel_id = c.message.chat.id
    ord_id = c.data[7:]
    text = '<b>–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—á–∏–Ω—É</b>'
    await bot.send_message(tel_id, text=text, reply_markup=mk.why_otm(ord_id), parse_mode='html')

@dp.callback_query_handler(lambda c: c.data.startswith('exp_'))
async def process_call(c):
    tel_id = c.message.chat.id
    ord_id = c.data[4:]
    text = '<b>–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ü–µ–Ω—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ</b>'
    await bot.send_message(tel_id, text=text, parse_mode='html')
    await UsersDbManager.otmo(ord_id, '–î–æ—Ä–æ–≥–æ', loop)

@dp.callback_query_handler(lambda c: c.data.startswith('myself_'))
async def process_call(c):
    tel_id = c.message.chat.id
    ord_id = c.data[7:]
    text = f'<b>–ó–∞–∫–∞–∑ ‚Ññ{ord_id} –æ—Ç–º–µ–Ω–µ–Ω üò¢</b>\n' \
           f'–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –±—É–¥–µ—Ç –ø–æ–º–æ—â—å, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å!\n' \
           f'–ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É üì±'

    await bot.send_message(tel_id, text=text, reply_markup=mk.manager(), parse_mode='html')
    await UsersDbManager.otmo(ord_id, '–°–¥–µ–ª–∞–ª —Å–∞–º', loop)

@dp.callback_query_handler(lambda c: c.data.startswith('other_'))
async def process_call(c):
    tel_id = c.message.chat.id
    ord_id = c.data[6:]
    text = f'<b>–ó–∞–∫–∞–∑ ‚Ññ{ord_id} –æ—Ç–º–µ–Ω–µ–Ω üò¢</b>\n' \
           f'–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –±—É–¥–µ—Ç –ø–æ–º–æ—â—å, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å!\n' \
           f'–ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É üì±'

    await bot.send_message(tel_id, text=text, reply_markup=mk.manager(), parse_mode='html')
    await UsersDbManager.otmo(ord_id, '–ó–∞–∫–∞–∑–∞–ª —É –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π', loop)

@dp.callback_query_handler(lambda c: c.data.startswith('another_'))
async def process_call(c):
    tel_id = c.message.chat.id
    ord_id = c.data[8:]
    text = f'<b>–ó–∞–∫–∞–∑ ‚Ññ{ord_id} –æ—Ç–º–µ–Ω–µ–Ω üò¢</b>\n' \
           f'–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –±—É–¥–µ—Ç –ø–æ–º–æ—â—å, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å!\n' \
           f'–ü–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É üì±'

    await bot.send_message(tel_id, text=text, reply_markup=mk.manager(), parse_mode='html')
    await UsersDbManager.otmo(ord_id, '–î—Ä—É–≥–æ–µ', loop)

@dp.message_handler(lambda message: message.text == '–ú–æ–∏ –±–æ–Ω—É—Å—ã üí∞')
async def loc_m(message):
    tel_id = message.chat.id
    bonuses = await UsersDbManager.get_bonuses(tel_id, loop)
    text = f'–ù–∞ –≤–∞—à–µ —Å—á–µ—Ç—É <i>{bonuses}</i> –≥—Ä–∏–≤–µ–Ω.\n\n' \
           f'–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –∑–∞–∫–∞–∑–∞!'
    await bot.send_message(tel_id, text=text, disable_notification=True, parse_mode='html')

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

'''
    n = detect_numbers(order_info[5])
    if len(n) > 0:
        await bot.send_message(tel_id, text='–ü–æ—Å—Ç –±—ã–ª –∑–∞–±—Ä–∞–∫–æ–≤–∞–Ω –±–æ—Ç–æ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é üò≥',
                               reply_markup=mk.main_menu_ru)
'''
