import asyncio
from threading import Thread
from time import sleep

import schedule
from aiogram import Bot, Dispatcher, executor
from aiogram.utils.text_decorations import markdown_decoration
import author_markup as mk
import markup as mk1
from config import AuthorTOKEN
from db_manager import UsersDbManager
import aiogram.types as tp
from aiogram.types import labeled_price
import requests
import datetime
from io import BytesIO
import re

bot = Bot(AuthorTOKEN)
dp = Dispatcher(bot)

loop = asyncio.get_event_loop()

TOKEN = AuthorTOKEN


@dp.message_handler(commands=['start'])
async def start(message):
    tel_id = message.chat.id

    text = '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üñê\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚¨áÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚¨áÔ∏è –∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –±–æ—Ç–µ'
    kb = mk.start_kb
    await bot.send_message(tel_id, text=text, reply_markup=kb, disable_notification=True)


@dp.message_handler(content_types=tp.ContentType.CONTACT)
async def get_contact(message):
    tel_id = message.chat.id

    phone_number = message.contact.phone_number
    username = message["from"].username

    await UsersDbManager.add_author(tel_id, phone_number, username, loop)

    text = 'üí• <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–≤—è–∑–∞–Ω –∫ –í–∞—à–µ–º—É –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞!</b> üí•'
    kb = tp.ReplyKeyboardRemove()
    await bot.send_message(tel_id, text=text, reply_markup=kb, disable_notification=True, parse_mode='html')

    text = '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –§–ò–û'
    await bot.send_message(tel_id, text=text, disable_notification=True, parse_mode='html')
    await UsersDbManager.update_context_a(tel_id, 'wait_fio', loop)


@dp.message_handler(lambda message:
                    UsersDbManager.sync_get_context(message.chat.id) == 'wait_fio')
async def wait_name(message):
    tel_id = message.chat.id

    text = '–ù–∞–ø–µ—á–∞—Ç–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –í–∞—à–µ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞‚Äçüéì\n\n' \
           '<i>–≠—Ç–æ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –±–ª–∞–≥–æ–¥–∞—Ä—è —ç—Ç–æ–º—É –ø–æ–Ω–∏–º–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ä–∞–±–æ—Ç–∞–º.</i>'
    await bot.send_message(tel_id, text=text, disable_notification=True, parse_mode='html')
    await UsersDbManager.update_context_a(tel_id, 'wait_name_vuz_a', loop)


@dp.message_handler(lambda message:
                    UsersDbManager.sync_get_context(message.chat.id) == 'wait_name_vuz_a')
async def wait_name(message):
    tel_id = message.chat.id

    vuz = str(message.text)
    await UsersDbManager.update_vuz_a(tel_id, vuz, loop)

    text = '<b>–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫—É—Ä—Å</b>'
    await bot.send_message(tel_id, text=text, reply_markup=mk.auth_kurs(), disable_notification=True, parse_mode='html')


@dp.callback_query_handler(lambda c: c.data.startswith('kurs_'))
async def process_call(c):
    tel_id = c.message.chat.id
    kurs = str(c.data[5:])

    await UsersDbManager.update_step_a(tel_id, kurs, loop)

    text = '<b>–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –í–∞—à —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π.</b>\n(–ù–æ–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞, —Å–µ—Ä–∏—é –∏ —à—Ç—Ä–∏—Ö–∫–æ–¥ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ)'
    await bot.send_message(tel_id, text=text, disable_notification=True, parse_mode='html')
    await UsersDbManager.update_context_a(tel_id, 'wait_ph_doc', loop)


@dp.callback_query_handler(lambda c: c.data.startswith('aspir'))
async def process_call(c):
    tel_id = c.message.chat.id

    await UsersDbManager.update_step_a(tel_id, '–ê—Å–ø–∏—Ä–∞–Ω—Ç', loop)

    text = '<b>–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª-–¥–æ–∫—É–º–µ–Ω—Ç –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ üìñ</b>'
    await bot.send_message(tel_id, text=text, disable_notification=True, parse_mode='html')
    await UsersDbManager.update_context_a(tel_id, 'wait_ph_doc', loop)


@dp.callback_query_handler(lambda c: c.data.startswith('prepod'))
async def process_call(c):
    tel_id = c.message.chat.id

    await UsersDbManager.update_step_a(tel_id, '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', loop)

    text = '<b>–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª-–¥–æ–∫—É–º–µ–Ω—Ç –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ üìñ</b>'
    await bot.send_message(tel_id, text=text, disable_notification=True, parse_mode='html')
    await UsersDbManager.update_context_a(tel_id, 'wait_ph_doc', loop)


@dp.callback_query_handler(lambda c: c.data.startswith('zak'))
async def process_call(c):
    tel_id = c.message.chat.id

    await UsersDbManager.update_step_a(tel_id, '–ó–∞–∫–æ–Ω—á–∏–ª', loop)

    text = '<b>–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª-–¥–æ–∫—É–º–µ–Ω—Ç –æ–± –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ üìñ</b>'
    await bot.send_message(tel_id, text=text, disable_notification=True, parse_mode='html')
    await UsersDbManager.update_context_a(tel_id, 'wait_ph_doc', loop)


@dp.message_handler(content_types=tp.ContentType.PHOTO)
async def sss1(message):
    tel_id = message.chat.id
    photo = None
    context = await UsersDbManager.get_context_a(tel_id, loop)
    if context == 'wait_ph_doc':
        photo = message.photo[-1].file_id
        file_info = await bot.get_file(photo)
        file = requests.get('https://api.telegram.org/file/bot{0}/{1}'.format(AuthorTOKEN, file_info.file_path))
        pht = file.content
        await UsersDbManager.insert_ph_img_a(tel_id, pht, loop)

        text = '–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–æ–≤'
        await bot.send_message(tel_id, text=text, disable_notification=True, parse_mode='html')
        await UsersDbManager.update_context_a(tel_id, 'wait_card', loop)

    elif context == 'online_work':
        customer = await UsersDbManager.get_cust_id(tel_id, loop)

        photo = message.photo[-1].file_id
        file_info = await bot.get_file(photo)
        file = requests.get('https://api.telegram.org/file/bot{0}/{1}'.format(AuthorTOKEN, file_info.file_path))
        pht = file.content
        await bot.send_photo(chat_id=customer, photo=pht)

    elif context == 'wait_done':
        ord_id = await UsersDbManager.get_num_a(tel_id, loop)

        photo = message.photo[-1].file_id
        file_info = await bot.get_file(photo)
        link = f'https://api.telegram.org/file/bot{TOKEN}/{file_info.file_path}'
        await UsersDbManager.insert_author_links(ord_id, link, loop)


@dp.message_handler(content_types=tp.ContentType.DOCUMENT)
async def sss1(message):
    tel_id = message.chat.id
    doc = None
    context = await UsersDbManager.get_context(tel_id, loop)
    ord_id = await UsersDbManager.get_ord_id(tel_id, loop)

    if context == 'online_work':
        customer = await UsersDbManager.get_cust_id(tel_id, loop)

        doc = message.document.file_id
        file_info = await bot.get_file(doc)
        file = requests.get('https://api.telegram.org/file/bot{0}/{1}'.format(TOKEN, file_info.file_path))
        pht = file.content
        await bot.send_document(chat_id=customer, document=pht)

    ord_id = await UsersDbManager.get_num_a(tel_id, loop)
    if context == 'wait_files':
        doc = message.document.file_id
        file_info = await bot.get_file(doc)
        link = f'https://api.telegram.org/file/bot{TOKEN}/{file_info.file_path}'
        await UsersDbManager.insert_author_links(ord_id, link, loop)


@dp.message_handler(lambda message:
                    UsersDbManager.sync_get_context(message.chat.id) == 'wait_card')
async def wait_name(message):
    tel_id = message.chat.id
    await UsersDbManager.update_card_a(tel_id, str(message.text), loop)

    text = '<b>–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å</b>'
    await bot.send_message(tel_id, text=text, reply_markup=mk1.prof, disable_notification=True, parse_mode='html')

    await UsersDbManager.update_context_a(tel_id, '', loop)


@dp.message_handler(lambda message: message.text == '–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–∞—É–∫–∏ ‚Äçüî¨üß¨')
async def loc_m(message):
    tel_id = message.chat.id
    await UsersDbManager.update_prof_a(tel_id, message.text[:-2], loop)
    text = f'<b>–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–µ–¥–º–µ—Ç</b> üëå'
    await bot.send_message(tel_id, text=text, reply_markup=mk1.predm(message.text[:-3]), disable_notification=True,
                           parse_mode='html')


@dp.message_handler(lambda message: message.text == '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å üõ†üíª')
async def loc_m(message):
    tel_id = message.chat.id
    await UsersDbManager.update_prof_a(tel_id, message.text[:-2], loop)
    text = f'<b>–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–µ–¥–º–µ—Ç</b> üëå'
    await bot.send_message(tel_id, text=text, reply_markup=mk1.predm(message.text[:-3]), disable_notification=True,
                           parse_mode='html')


@dp.message_handler(lambda message: message.text == '–ì—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã üë©‚Äçüéì')
async def loc_m(message):
    tel_id = message.chat.id
    await UsersDbManager.update_prof_a(tel_id, message.text[:-3], loop)
    text = f'<b>–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–µ–¥–º–µ—Ç</b> üëå'
    await bot.send_message(tel_id, text=text, reply_markup=mk1.predm(message.text[:-3]), disable_notification=True,
                           parse_mode='html')


@dp.message_handler(lambda message: message.text == '–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã üìä')
async def loc_m(message):
    tel_id = message.chat.id
    await UsersDbManager.update_prof_a(tel_id, message.text[:-1], loop)
    text = f'<b>–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–µ–¥–º–µ—Ç</b> üëå'
    await bot.send_message(tel_id, text=text, reply_markup=mk1.predm(message.text[:-3]), disable_notification=True,
                           parse_mode='html')


@dp.message_handler(lambda message: message.text == '–Ø–∑—ã–∫–∏ üó£')
async def loc_m(message):
    tel_id = message.chat.id
    await UsersDbManager.update_prof_a(tel_id, message.text[:-1], loop)
    text = f'<b>–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–µ–¥–º–µ—Ç</b> üëå'
    await bot.send_message(tel_id, text=text, reply_markup=mk1.predm(message.text[:-3]), disable_notification=True,
                           parse_mode='html')


@dp.message_handler(lambda message: message.text == '–ü—Ä–∞–≤–æ, —é—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏—è ‚öñÔ∏è')
async def loc_m(message):
    tel_id = message.chat.id
    await UsersDbManager.update_prof_a(tel_id, message.text[:-1], loop)
    await bot.send_message(tel_id, text=str(message.text), reply_markup=mk1.prof, disable_notification=True)
    await bot.send_message(tel_id, text='<b>–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å</b>', reply_markup=mk.zav(), disable_notification=True,
                           parse_mode='html')


@dp.message_handler(lambda message: message.text in mk1.a)
async def loc_m(message):
    tel_id = message.chat.id
    await UsersDbManager.update_predm_a(tel_id, message.text, loop)
    await bot.send_message(tel_id, text=str(message.text), reply_markup=mk1.prof, disable_notification=True)
    await bot.send_message(tel_id, text='<b>–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å</b>', reply_markup=mk.zav(), disable_notification=True,
                           parse_mode='html')


@dp.message_handler(lambda message: message.text in mk1.t)
async def loc_m(message):
    tel_id = message.chat.id
    await UsersDbManager.update_predm_a(tel_id, message.text, loop)
    await bot.send_message(tel_id, text=str(message.text), reply_markup=mk1.prof, disable_notification=True)
    await bot.send_message(tel_id, text='<b>–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å</b>', reply_markup=mk.zav(), disable_notification=True,
                           parse_mode='html')


@dp.message_handler(lambda message: message.text in mk1.g)
async def loc_m(message):
    tel_id = message.chat.id
    await UsersDbManager.update_predm_a(tel_id, message.text, loop)
    await bot.send_message(tel_id, text=str(message.text), reply_markup=mk1.prof, disable_notification=True)
    await bot.send_message(tel_id, text='<b>–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å</b>', reply_markup=mk.zav(), disable_notification=True,
                           parse_mode='html')


@dp.message_handler(lambda message: message.text in mk1.e)
async def loc_m(message):
    tel_id = message.chat.id
    await UsersDbManager.update_predm_a(tel_id, message.text, loop)
    await bot.send_message(tel_id, text=str(message.text), reply_markup=mk1.prof, disable_notification=True)
    await bot.send_message(tel_id, text='<b>–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å</b>', reply_markup=mk.zav(), disable_notification=True,
                           parse_mode='html')


@dp.message_handler(lambda message: message.text in mk1.l)
async def loc_m(message):
    tel_id = message.chat.id
    await UsersDbManager.update_predm_a(tel_id, message.text, loop)
    await bot.send_message(tel_id, text=str(message.text), reply_markup=mk1.prof, disable_notification=True)
    await bot.send_message(tel_id, text='<b>–í—ã–±–µ—Ä–µ—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å</b>', reply_markup=mk.zav(), disable_notification=True,
                           parse_mode='html')


@dp.callback_query_handler(lambda c: c.data.startswith('zaver'))
async def process_call(c):
    tel_id = c.message.chat.id
    text = '–°–ø–∞—Å–∏–±–æ, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –¥–∞—Å—Ç –í–∞–º –¥–æ—Å—Ç—É–ø –∫ –∑–∞–∫–∞–∑–∞–º'
    await bot.send_message(tel_id, text=text, reply_markup=tp.ReplyKeyboardRemove(), disable_notification=True)
    await send_confirm(tel_id)
    await UsersDbManager.update_context_a(tel_id, 'wait_confirm', loop)


async def send_confirm(tel_id):
    # –ü–æ–¥–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫–æ–º—É-—Ç–æ —Ç–∞–º

    text = 'üéä –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è üéä\n\n' \
           'üôå–û—Ü–µ–Ω–∏–≤–∞–π—Ç–µ –∑–∞–∫–∞–∑—ã\n' \
           'üìù–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è\n' \
           'üí∏–ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ —Å –Ω–∞–º–∏\n\n' \
           '–ï—Å–ª–∏ —É –≤–∞—Å –ø–æ—è–≤–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º\n' \
           '‚å®Ô∏è https://t.me/reshalaa_help\n' \
           'üì± +380634690637'
    await bot.send_message(tel_id, text=text, reply_markup=mk.main_menu, disable_notification=True, parse_mode='html')
    await UsersDbManager.update_context_a(tel_id, '', loop)


@dp.message_handler(lambda message: message.text == '–°–≤–æ–±–æ–¥–Ω—ã–µ –∑–∞–∫–∞–∑—ã üìù')
async def loc_m(message):
    tel_id = message.chat.id
    orders = await UsersDbManager.get_orders(tel_id, loop)
    if orders is None:
        text = '<b>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ –í–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b> üôÅ\n' \
               '–ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤—è—Ç—Å—è, –º—ã —Å—Ä–∞–∑—É —Å–æ–æ–±—â–∏–º'
        await bot.send_message(tel_id, text=text, reply_markup=mk.main_menu_1,
                               disable_notification=True, parse_mode='html')
    else:
        for order in orders:
            vuz = await UsersDbManager.get_user_vuz(order[1], loop)

            text = f'‚ú® –ó–∞–∫–∞–∑ ‚Ññ{order[0]} ‚ú®\n\n' \
                   f'<b>{order[4]}</b>\n' \
                   f'<b>{order[2]}</b>\n\n' \
                   f'–°—Ä–æ–∫ —Å–¥–∞—á–∏: {order[7]} {order[8]}\n' \
                   f'–¶–µ–Ω–∞: {order[10]}\n\n' \
                   f'–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ: {order[6]}\n' \
                   f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order[5]}\n\n' \
                   f'–í–£–ó: {vuz}' \
                   f'\n–ü—Ä–∏–∫—Ä–∏–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:'
            await bot.send_message(tel_id, text=text, reply_markup=mk.ord_1(order[0]), disable_notification=True,
                                   parse_mode='html')
            await send_files(tel_id, order[0])


async def send_files(tel_id, order_id):
    docs = await UsersDbManager.get_docs(order_id, loop)
    ph = []
    if docs == False:
        await bot.send_message(tel_id, text='–ù–µ—Ç –ø—Ä–∏–∫—Ä–∏–ø–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤', disable_notification=True)
    else:
        for doc in docs:
            if doc[2] == 'photto':
                await bot.send_photo(tel_id, photo=doc[1])
            else:
                await bot.send_document(tel_id, document=doc[1])


@dp.callback_query_handler(lambda c: c.data.startswith('nint_'))
async def process_call(c):
    tel_id = c.message.chat.id
    ord_id = str(c.data[5:])
    text = f'–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –æ—Ü–µ–Ω–∫–∏ –∑–∞–∫–∞–∑–∞ <b>‚Ññ{ord_id}</b>'
    await bot.edit_message_text(text=text, message_id=c.message.message_id, parse_mode='html')
    await UsersDbManager.add_pre_order_author(ord_id, tel_id, loop)
    await UsersDbManager.update_ord_price(tel_id, '---', loop)


@dp.callback_query_handler(lambda c: c.data.startswith('otzenit_'))
async def process_call(c):
    tel_id = c.message.chat.id
    ord_id = str(c.data[8:])

    text = f'<b>–û—Ü–µ–Ω–∏—Ç–µ –∑–∞–∫–∞–∑ ‚Ññ{ord_id}</b> ü§©\n–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É, –∑–∞ –∫–æ—Ç–æ—Ä—É—é –í—ã –≥–æ—Ç–æ–≤—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑.\n' \
           '‚ùóÔ∏è –£–∫–∞–∑—ã–≤–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã‚ùóÔ∏è'
    await bot.send_message(tel_id, text=text, reply_markup=mk.otm_otz, disable_notification=True, parse_mode='html')

    await UsersDbManager.update_context_a(tel_id, 'wait_price_a', loop)
    await UsersDbManager.add_pre_order_author(ord_id, tel_id, loop)


@dp.message_handler(lambda message: message.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫—É ‚ùå')
async def loc_m(message):
    tel_id = message.chat.id
    text = '–û—Ü–µ–Ω–∫–∞ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!'
    await bot.send_message(tel_id, text=text, reply_markup=mk.main_menu_1, disable_notification=True)


@dp.message_handler(lambda message:
                    UsersDbManager.sync_get_context_a(message.chat.id) == 'wait_price_a')
async def wait_name(message):
    tel_id = message.chat.id
    price = str(message.text)

    await UsersDbManager.update_ord_price(tel_id, price, loop)
    await UsersDbManager.update_context_a(tel_id, 'wait_com_a', loop)

    text = '<b>–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞, –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π' \
           ' –∏–ª–∏ –∑–∞–¥–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å</b> üòâ'
    await bot.send_message(tel_id, text=text, reply_markup=mk.no_com,
                           disable_notification=True, parse_mode='html')


@dp.message_handler(lambda message:
                    UsersDbManager.sync_get_context_a(message.chat.id) == 'wait_com_a')
async def wait_name(message):
    tel_id = message.chat.id
    com = str(message.text)

    await UsersDbManager.update_ord_com(tel_id, com, loop)
    await UsersDbManager.update_context_a(tel_id, '', loop)

    text = '‚ùóÔ∏è <b>–ù–µ –ø—Ä–∏—Å—Ç—É–ø–∞–π—Ç–µ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é, –ø–æ–∫–∞ –Ω–µ –ø—Ä–∏–¥—ë—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ</b>‚ùóÔ∏è'
    await bot.send_message(tel_id, text=text, reply_markup=mk.main_menu_2,
                           disable_notification=True, parse_mode='html')


async def confirm_order(tel_id, ord_id):
    order, vuz = await UsersDbManager.get_order_a(ord_id, loop)
    price = await UsersDbManager.get_a_price(ord_id, tel_id, loop)

    text = f'<b>–ó–∞–∫–∞–∑ ‚Ññ{ord_id} –≤–∞—à!</b> üöÄ\n\n' \
           f'‚ú® –ó–∞–∫–∞–∑ ‚Ññ{order[0]} ‚ú®\n\n' \
           f'<b>{order[4]}</b>\n' \
           f'<b>{order[2]}</b>\n\n' \
           f'–°—Ä–æ–∫ —Å–¥–∞—á–∏: {order[7]} {order[8]}\n' \
           f'–¶–µ–Ω–∞: {price}\n\n' \
           f'–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ: {order[6]}\n' \
           f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order[5]}\n\n' \
           f'–í–£–ó: {vuz}' \
           f'\n–ü—Ä–∏–∫—Ä–∏–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:'
    await bot.send_message(tel_id, text=text, reply_markup=mk.ord_1(order[0]), disable_notification=True,
                           parse_mode='html')
    await send_files(tel_id, order[0])


async def send_time(tel_id, ord_id):
    text = f'<b>–†–µ—à–µ–Ω–∏–µ ‚Ññ{ord_id} —á–µ—Ä–µ–∑ 10 –º–∏–Ω !</b> üöÄ\n–ù–∞–∂–º–∏—Ç–µ <b>–≤–æ–π—Ç–∏ –≤ —á–∞—Ç —Å –∑–∞–∫–∞–∑—á–∏–∫–æ–º</b> –∏ –æ–∂–∏–¥–∞–π—Ç–µ —Ä–∞–±–æ—Ç—É.\n' \
           '–ò–ª–∏ –∂–µ –∑–∞–∫–∞–∑—á–∏–∫ —Å–∞–º –¥–æ–±–∞–≤–∏—Ç –≤–∞—Å –≤ —á–∞—Ç, –∫–æ–≥–¥–∞ –±—É–¥—É—Ç –∑–∞–¥–∞–Ω–∏—è.' \
           '\n\n–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è —Å–∫–∏–¥—ã–≤–∞–π—Ç–µ –ø–æ –º–µ—Ä–µ —Ä–µ—à–µ–Ω–∏—è.'
    await bot.send_message(tel_id, text=text, reply_markup=mk.onl(), parse_mode='html')


@dp.callback_query_handler(lambda c: c.data.startswith('enter_online'))
async def process_call(c):
    tel_id = c.message.chat.id

    customer = await UsersDbManager.get_cust_id(tel_id, loop)

    text_2 = '<b>–í—ã –≤–æ—à–ª–∏ –≤ —á–∞—Ç —Å –∑–∞–∫–∞–∑—á–∏–∫–æ–º.</b>\n' \
             '–ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –∫–æ–≥–¥–∞ —Ä–∞–±–æ—Ç–∞ –±—É–¥–µ—Ç –∑–∞–∫–æ–Ω—á–µ–Ω–∞, –º–æ–∂–µ—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å —á–∞—Ç.\n' \
             '–ï—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è, –º–æ–∂–µ—Ç–µ –æ—Ü–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑.'
    await bot.send_message(tel_id, text=text_2, reply_markup=mk.onl_2, parse_mode='html')

    text = '<b>–í —á–∞—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω –∞–≤—Ç–æ—Ä</b> üöÄ\n' \
           '–°–∫–∏–Ω—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ –±–∏–ª–µ—Ç–∞'
    await bot.send_message(customer, text=text, reply_markup=mk1.author_otm, parse_mode='html')

    await UsersDbManager.update_context_a(tel_id, 'online_work', loop)
    await UsersDbManager.update_context(customer, 'online_work', loop)


@dp.message_handler(lambda message:
                    UsersDbManager.sync_get_context(message.chat.id) == 'online_work')
async def wait_name(message):
    tel_id = message.chat.id
    customer = await UsersDbManager.get_cust_id(tel_id, loop)
    await bot.send_message(customer, text=message.text)


@dp.message_handler(lambda message: message.text == '–û–Ω–ª–∞–π–Ω —Ä–∞–±–æ—Ç–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞  ‚ùå')
async def loc_m(message):
    tel_id = message.chat.id

    customer = await UsersDbManager.get_cust_id(tel_id, loop)

    text = 'oko'
    await bot.send_message(tel_id, text=text)
    await UsersDbManager.update_context(customer, '', loop)

    await UsersDbManager.update_context_a(tel_id, '', loop)


async def send_new_order(ord_id):
    order = await UsersDbManager.get_new_order(ord_id, loop)
    tel_id = order[1]
    user = await UsersDbManager.get_user(tel_id, loop)
    text = f'‚ú® –ó–∞–∫–∞–∑ ‚Ññ{order[0]} ‚ú®\n\n' \
           f'<b>{order[4]}</b>\n' \
           f'<b>{order[2]}</b>\n\n' \
           f'–°—Ä–æ–∫ —Å–¥–∞—á–∏: {order[7]} {order[8]}\n' \
           f'–¶–µ–Ω–∞: {order[10]}\n\n' \
           f'–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ: {order[6]}\n' \
           f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order[5]}\n\n' \
           f'–í–£–ó: {user[3]}' \
           f'\n–ü—Ä–∏–∫—Ä–∏–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:'
    authors = await UsersDbManager.get_authors(ord_id, loop)
    for author in authors:
        await bot.send_message(author[0], text=text, reply_markup=mk.ord_1(order[0]), disable_notification=True,
                               parse_mode='html')
        await send_files(tel_id, order[0])


async def confirm_order(tel_id, ord_id):
    order = await UsersDbManager.get_active_order(ord_id, loop)
    print('order:', order)
    author_price = await UsersDbManager.get_author_price(ord_id, loop)
    print('ap:', author_price)

    vuz = await UsersDbManager.get_user_vuz(order[1], loop)
    print('vuz:', vuz)
    if str(order[2]) == 'Online —Ä–µ—à–µ–Ω–∏–µ' or str(order[2]) == '–¢–µ—Å—Ç –¥–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ':
        text = f'<b>–ó–∞–∫–∞–∑ ‚Ññ{ord_id} –≤–∞—à!</b> üöÄ\n\n' \
               f'‚ú® –ó–∞–∫–∞–∑ ‚Ññ{ord_id} ‚ú®‚Ä®\n\n' \
               f'<b>–ü—Ä–µ–¥–º–µ—Ç:</b> {order[4]}\n' \
               f'<b>–¢–∏–ø —Ä–∞–±–æ—Ç—ã:</b> {order[2]}\n\n' \
               f'–°—Ä–æ–∫ —Å–¥–∞—á–∏: {order[7]}\n' \
               f'\n{order[8]}-{order[9]}\n' \
               f'–¶–µ–Ω–∞: {author_price}\n\n' \
               f'–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ:{order[6]}\n' \
               f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order[5]}\n\n' \
               f'–í—É–∑: {vuz}\n' \
               f'–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:'
    else:
        text = f'<b>–ó–∞–∫–∞–∑ ‚Ññ{ord_id} –≤–∞—à!</b> üöÄ\n\n' \
               f'‚ú® –ó–∞–∫–∞–∑ ‚Ññ{ord_id} ‚ú®‚Ä®\n\n' \
               f'<b>–ü—Ä–µ–¥–º–µ—Ç:</b> {order[4]}\n' \
               f'<b>–¢–∏–ø —Ä–∞–±–æ—Ç—ã:</b> {order[2]}\n\n' \
               f'–°—Ä–æ–∫ —Å–¥–∞—á–∏: {order[7]} {order[8]}\n' \
               f'–¶–µ–Ω–∞: {author_price}\n\n' \
               f'–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ:{order[6]}\n' \
               f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order[5]}\n\n' \
               f'–í—É–∑: {vuz}\n' \
               f'–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:'
    await bot.send_message(tel_id, text=text, reply_markup=mk.ready(ord_id), parse_mode='html')
    await send_files(tel_id, ord_id)


@dp.callback_query_handler(lambda c: c.data.startswith('done_'))
async def process_call(c):
    tel_id = c.message.chat.id
    ord_id = str(c.data[5:])
    text = '–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ —Ñ–∞–π–ª—ã —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –∑–∞–¥–∞–Ω–∏–µ–º. –ö–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã, –Ω–∞–∂–º–∏—Ç–µ –ì–æ—Ç–æ–≤–æ'
    await bot.send_message(tel_id, text=text, reply_markup=mk1.ok)
    await UsersDbManager.update_context_a(tel_id, 'wait_done', loop)
    #await UsersDbManager.add_num_a(tel_id, ord_id, loop)
    await UsersDbManager.waito(ord_id, loop)

@dp.message_handler(lambda message: message.text == '–ì–æ—Ç–æ–≤–æ')
async def loc_m(message):
    tel_id = message.chat.id

    text = '–†–µ—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!'
    await bot.send_message(tel_id, text=text)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
